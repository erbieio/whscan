// Package docs GENERATED BY SWAG; DO NOT EDIT
// This file was generated by swaggo/swag
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/account/page": {
            "get": {
                "description": "set the account ranking according to the amount of coins held",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "account"
                ],
                "summary": "query top accounts",
                "parameters": [
                    {
                        "type": "string",
                        "description": "sort by conditions, Support database order statement",
                        "name": "order",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Page, default 1",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Page size, default 10",
                        "name": "page_size",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/service.AccountsRes"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/service.ErrRes"
                        }
                    }
                }
            }
        },
        "/account/{addr}": {
            "get": {
                "description": "Query the account information of the specified address",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "account"
                ],
                "summary": "query one account",
                "parameters": [
                    {
                        "type": "string",
                        "description": "account address",
                        "name": "addr",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/service.AccountRes"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/service.ErrRes"
                        }
                    }
                }
            }
        },
        "/block/page": {
            "get": {
                "description": "Query the block list in reverse order of height",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "block"
                ],
                "summary": "query block list",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Page, default 1",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Page size, default 10",
                        "name": "page_size",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/service.BlocksRes"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/service.ErrRes"
                        }
                    }
                }
            }
        },
        "/block/{number}": {
            "get": {
                "description": "specifies the number query block",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "block"
                ],
                "summary": "query block",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Block number",
                        "name": "number",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Block"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/service.ErrRes"
                        }
                    }
                }
            }
        },
        "/chart/line": {
            "get": {
                "description": "query charts",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "chart"
                ],
                "summary": "query charts",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Limit, default 10",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/service.LineChartRes"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/service.ErrRes"
                        }
                    }
                }
            }
        },
        "/chart/nft": {
            "get": {
                "description": "query 24h nft growth charts",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "chart"
                ],
                "summary": "query 24h nft growth charts",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/service.NFTChartRes"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/service.ErrRes"
                        }
                    }
                }
            }
        },
        "/chart/tx": {
            "get": {
                "description": "query 24h tx growth charts",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "chart"
                ],
                "summary": "query 24h tx growth charts",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/service.TxChartRes"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/service.ErrRes"
                        }
                    }
                }
            }
        },
        "/creator/page": {
            "get": {
                "description": "Query the creator list, page",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "creator"
                ],
                "summary": "Query the creator list",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Page, default 1",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Page size, default 10",
                        "name": "page_size",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "sort by conditions, Support database order statement",
                        "name": "order",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/service.CreatorsRes"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/service.ErrRes"
                        }
                    }
                }
            }
        },
        "/creator/top": {
            "get": {
                "description": "Query the top creators",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "creator"
                ],
                "summary": "Query the top creators",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "request number, default 10",
                        "name": "size",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.Creator"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/service.ErrRes"
                        }
                    }
                }
            }
        },
        "/creator/{addr}": {
            "get": {
                "description": "specifies the address to query the creator",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "creator"
                ],
                "summary": "Query a creator",
                "parameters": [
                    {
                        "type": "string",
                        "description": "creator address",
                        "name": "addr",
                        "in": "path"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Creator"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/service.ErrRes"
                        }
                    }
                }
            }
        },
        "/epoch": {
            "get": {
                "description": "Query the system NFT period list in reverse order of creation time",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "system NFT period"
                ],
                "summary": "Query the system NFT period list",
                "parameters": [
                    {
                        "type": "string",
                        "description": "only return the creator's epoch",
                        "name": "creator",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "sort by conditions, Support database order statement",
                        "name": "order",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Page, default 1",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Page size, default 10",
                        "name": "page_size",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/service.EpochsRes"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/service.ErrRes"
                        }
                    }
                }
            }
        },
        "/epoch/{id}": {
            "get": {
                "description": "specifies the ID to query the NFT period information of the system, including 16 collection information",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "system NFT period"
                ],
                "summary": "Query system NFT period",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Period ID, current means query the current period",
                        "name": "id",
                        "in": "path"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Epoch"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/service.ErrRes"
                        }
                    }
                }
            }
        },
        "/erb_price": {
            "get": {
                "description": "Query an ERB price, 1ERB=10^18wei, failed to implement the ERB price definition, fixed at 1ERB=0.5USD",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "other interfaces"
                ],
                "summary": "query ERB price",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.price"
                        }
                    }
                }
            }
        },
        "/exec_sql": {
            "get": {
                "description": "execute sql statement and return the result, only read",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "other interfaces"
                ],
                "summary": "exec sql statement",
                "parameters": [
                    {
                        "type": "string",
                        "description": "admin key",
                        "name": "key",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "sql statement",
                        "name": "sql",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/service.ErrRes"
                        }
                    }
                }
            }
        },
        "/nft/page": {
            "get": {
                "description": "Query the NFT list in reverse order of creation time",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "NFT"
                ],
                "summary": "query NFT list",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Owner, if empty, query all",
                        "name": "owner",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Page, default 1",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Page size, default 10",
                        "name": "page_size",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/service.NFTsRes"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/service.ErrRes"
                        }
                    }
                }
            }
        },
        "/nft/tx/epoch": {
            "get": {
                "description": "Query the specified period of snft transactions",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "NFT"
                ],
                "summary": "Query SNFT transaction list",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Specify the period id",
                        "name": "id",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Page, default 1",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Page size, default 10",
                        "name": "page_size",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/service.NFTTxsRes"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/service.ErrRes"
                        }
                    }
                }
            }
        },
        "/nft/tx/page": {
            "get": {
                "description": "Query the list of NFT transactions in reverse order of creation time",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "NFT"
                ],
                "summary": "Query NFT transaction list",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Specify the NFT address, if empty, query all addresses",
                        "name": "address",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Exchange, if empty, query all exchanges",
                        "name": "exchanger",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Specify an account, if empty, query all accounts",
                        "name": "account",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Page, default 1",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Page size, default 10",
                        "name": "page_size",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/service.NFTTxsRes"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/service.ErrRes"
                        }
                    }
                }
            }
        },
        "/nft/tx/{hash}": {
            "get": {
                "description": "Query the NFT of SNFT transactions by hash",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "NFT"
                ],
                "summary": "Query NFT transaction",
                "parameters": [
                    {
                        "type": "string",
                        "description": "transaction hash",
                        "name": "hash",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.NFTTx"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/service.ErrRes"
                        }
                    }
                }
            }
        },
        "/nft/{addr}": {
            "get": {
                "description": "Query one NFT by address",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "NFT"
                ],
                "summary": "query one NFT",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Address",
                        "name": "addr",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.NFT"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/service.ErrRes"
                        }
                    }
                }
            }
        },
        "/pledge/page": {
            "get": {
                "description": "Query pledge list",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "block"
                ],
                "summary": "query pledge list",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Page, default 1",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Page size, default 10",
                        "name": "page_size",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "staker address",
                        "name": "staker",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "validator address",
                        "name": "validator",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/service.PledgesRes"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/service.ErrRes"
                        }
                    }
                }
            }
        },
        "/ranking/nft": {
            "get": {
                "description": "NFT ranking for a specified time range",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Ranking"
                ],
                "summary": "query NFT ranking",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Page, default 1",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Page size, default 10",
                        "name": "page_size",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/service.RankingNFTRes"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/service.ErrRes"
                        }
                    }
                }
            }
        },
        "/ranking/snft": {
            "get": {
                "description": "SNFT ranking for a specified time range",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Ranking"
                ],
                "summary": "query SNFT ranking",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Page, default 1",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Page size, default 10",
                        "name": "page_size",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/service.RankingSNFTRes"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/service.ErrRes"
                        }
                    }
                }
            }
        },
        "/ranking/staker": {
            "get": {
                "description": "Staker ranking for a specified time range",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Ranking"
                ],
                "summary": "query staker ranking",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Page, default 1",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Page size, default 10",
                        "name": "page_size",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/service.RankingStakerRes"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/service.ErrRes"
                        }
                    }
                }
            }
        },
        "/reward": {
            "get": {
                "description": "query the reward list in reverse order",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "reward"
                ],
                "summary": "Query the reward list",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Page, default 1",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Page size, default 10",
                        "name": "page_size",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/service.RewardsRes"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/service.ErrRes"
                        }
                    }
                }
            }
        },
        "/reward/{block}": {
            "get": {
                "description": "specifies the block query reward",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "reward"
                ],
                "summary": "query reward",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Block height",
                        "name": "block",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.Reward"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/service.ErrRes"
                        }
                    }
                }
            }
        },
        "/snft/block": {
            "get": {
                "description": "Query the list of SNFT rewards for the specified block",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "NFT"
                ],
                "summary": "Query blocks SNFT list",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Block number",
                        "name": "number",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.SNFT"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/service.ErrRes"
                        }
                    }
                }
            }
        },
        "/snft/page": {
            "get": {
                "description": "Query the SNFT list in reverse order of creation time",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "NFT"
                ],
                "summary": "query SNFT list",
                "parameters": [
                    {
                        "type": "string",
                        "description": "sort, 1:level priority,none:default",
                        "name": "sort",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Owner, if empty, query all",
                        "name": "owner",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Page, default 1",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Page size, default 10",
                        "name": "page_size",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/service.SNFTsRes"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/service.ErrRes"
                        }
                    }
                }
            }
        },
        "/snft/recycle_tx": {
            "get": {
                "description": "Query one SNFT recycle transaction by address or tx hash",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "NFT"
                ],
                "summary": "query recycle transaction",
                "parameters": [
                    {
                        "type": "string",
                        "description": "recycle tx hash",
                        "name": "hash",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "recycle address",
                        "name": "addr",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.NFTTx"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/service.ErrRes"
                        }
                    }
                }
            }
        },
        "/snft/{addr}": {
            "get": {
                "description": "Query one SNFT by address",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "NFT"
                ],
                "summary": "query one SNFT",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Address",
                        "name": "addr",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/service.SNFTRes"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/service.ErrRes"
                        }
                    }
                }
            }
        },
        "/snft_meta/page": {
            "get": {
                "description": "Query the list of SNFTs with meta information in reverse order of creation time",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "NFT"
                ],
                "summary": "Query a list of SNFTs with meta information",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Owner, if empty, query all",
                        "name": "owner",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Page, default 1",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Page size, default 10",
                        "name": "page_size",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/service.SNFTsAndMetaRes"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/service.ErrRes"
                        }
                    }
                }
            }
        },
        "/staker/page": {
            "get": {
                "description": "Query the list of stakers in reverse order of creation time",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Staker"
                ],
                "summary": "Query the list of stakers",
                "parameters": [
                    {
                        "type": "string",
                        "description": "sort by conditions, Support database order statement",
                        "name": "order",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Page, default 1",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Page size, default 10",
                        "name": "page_size",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/service.StakersRes"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/service.ErrRes"
                        }
                    }
                }
            }
        },
        "/staker/{addr}": {
            "get": {
                "description": "Query staker by address",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Staker"
                ],
                "summary": "query staker",
                "parameters": [
                    {
                        "type": "string",
                        "description": "staker address",
                        "name": "addr",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Staker"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/service.ErrRes"
                        }
                    }
                }
            }
        },
        "/stats": {
            "get": {
                "description": "Query the total number of blocks, transactions, accounts, etc.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "block"
                ],
                "summary": "query some stats data",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Stats"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/service.ErrRes"
                        }
                    }
                }
            }
        },
        "/totals": {
            "get": {
                "description": "Query the total number of blocks, transactions, accounts, etc.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "block"
                ],
                "summary": "query some total data (new /stats)",
                "deprecated": true,
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Stats"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/service.ErrRes"
                        }
                    }
                }
            }
        },
        "/transaction/internal/page": {
            "get": {
                "description": "query internal transaction list in reverse order",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "transaction"
                ],
                "summary": "query internal transaction list",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Page, default 1",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Page size, default 10",
                        "name": "page_size",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/service.InternalTxsRes"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/service.ErrRes"
                        }
                    }
                }
            }
        },
        "/transaction/internal/{hash}": {
            "get": {
                "description": "specifies the hash query internal transaction",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "transaction"
                ],
                "summary": "query internal transaction list",
                "parameters": [
                    {
                        "type": "string",
                        "description": "tx hash",
                        "name": "hash",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.InternalTx"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/service.ErrRes"
                        }
                    }
                }
            }
        },
        "/transaction/page": {
            "get": {
                "description": "query transaction list in reverse order",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "transaction"
                ],
                "summary": "query transaction list",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Page, default 1",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Page size, default 10",
                        "name": "page_size",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Block number, if empty, query all",
                        "name": "number",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Account address, if empty, query all",
                        "name": "addr",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/service.TransactionsRes"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/service.ErrRes"
                        }
                    }
                }
            }
        },
        "/transaction/{hash}": {
            "get": {
                "description": "specifies the hash query transaction",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "transaction"
                ],
                "summary": "query transaction",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Transaction hash",
                        "name": "hash",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/service.TransactionRes"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/service.ErrRes"
                        }
                    }
                }
            }
        },
        "/transaction_logs/{hash}": {
            "get": {
                "description": "specifies the transaction hash to query the transaction receipt",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "transaction"
                ],
                "summary": "query transaction receipt",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Transaction hash",
                        "name": "hash",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.EventLog"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/service.ErrRes"
                        }
                    }
                }
            }
        },
        "/validator/last_msg": {
            "get": {
                "description": "Query validator's last msg list",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "validator"
                ],
                "summary": "query validator msg list",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/service.Msg"
                            }
                        }
                    }
                }
            }
        },
        "/validator/locations": {
            "get": {
                "description": "Query validator's locations",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "validator"
                ],
                "summary": "query validator locations",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/service.LocationRes"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/service.ErrRes"
                        }
                    }
                }
            }
        },
        "/validator/page": {
            "get": {
                "description": "Query validator's information",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "validator"
                ],
                "summary": "query validator list",
                "parameters": [
                    {
                        "type": "string",
                        "description": "sort by conditions, Support database order statement",
                        "name": "order",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Page, default 1",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Page size, default 10",
                        "name": "page_size",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.Validator"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/service.ErrRes"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "api.price": {
            "type": "object",
            "properties": {
                "CNY": {
                    "description": "The price of an ERB in RMB",
                    "type": "number"
                },
                "USD": {
                    "description": "The price of an ERB in USD",
                    "type": "number"
                }
            }
        },
        "model.Block": {
            "type": "object",
            "properties": {
                "difficulty": {
                    "description": "transaction random number, transaction volume",
                    "type": "integer"
                },
                "extraData": {
                    "description": "Extra data",
                    "type": "string"
                },
                "gasLimit": {
                    "description": "transaction random number, transaction volume",
                    "type": "integer"
                },
                "gasUsed": {
                    "description": "transaction random number, transaction volume",
                    "type": "integer"
                },
                "hash": {
                    "description": "create transaction",
                    "type": "string"
                },
                "miner": {
                    "description": "address",
                    "type": "string"
                },
                "mixHash": {
                    "description": "create transaction",
                    "type": "string"
                },
                "nonce": {
                    "description": "difficulty random number",
                    "type": "string"
                },
                "number": {
                    "description": "transaction random number, transaction volume",
                    "type": "integer"
                },
                "parentHash": {
                    "description": "create transaction",
                    "type": "string"
                },
                "proposers": {
                    "description": "black hole block proposers address",
                    "type": "array",
                    "items": {
                        "description": "address",
                        "type": "string"
                    }
                },
                "receiptsRoot": {
                    "description": "create transaction",
                    "type": "string"
                },
                "sha3Uncles": {
                    "description": "create transaction",
                    "type": "string"
                },
                "size": {
                    "description": "transaction random number, transaction volume",
                    "type": "integer"
                },
                "stateRoot": {
                    "description": "create transaction",
                    "type": "string"
                },
                "timestamp": {
                    "description": "transaction random number, transaction volume",
                    "type": "integer"
                },
                "totalDifficulty": {
                    "description": "The total amount of coins in the chain",
                    "type": "string"
                },
                "totalTransaction": {
                    "description": "transaction random number, transaction volume",
                    "type": "integer"
                },
                "transactionsRoot": {
                    "description": "create transaction",
                    "type": "string"
                },
                "uncles": {
                    "description": "Uncle block hash",
                    "type": "array",
                    "items": {
                        "description": "create transaction",
                        "type": "string"
                    }
                },
                "validators": {
                    "description": "black hole block validators address",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.Penalty"
                    }
                }
            }
        },
        "model.Creator": {
            "type": "object",
            "properties": {
                "address": {
                    "description": "account address",
                    "type": "string"
                },
                "count": {
                    "description": "selected count",
                    "type": "integer"
                },
                "lastEpoch": {
                    "description": "last selected for the epoch",
                    "type": "string"
                },
                "lastNumber": {
                    "description": "last selected for the block number",
                    "type": "integer"
                },
                "lastTime": {
                    "description": "last selected for the timestamp",
                    "type": "integer"
                },
                "number": {
                    "description": "be a Creator block number",
                    "type": "integer"
                },
                "profit": {
                    "description": "royalty profit",
                    "type": "string"
                },
                "reward": {
                    "description": "vote profit",
                    "type": "string"
                },
                "timestamp": {
                    "description": "be a Creator Time",
                    "type": "integer"
                }
            }
        },
        "model.Epoch": {
            "type": "object",
            "properties": {
                "creator": {
                    "description": "creator address, also the address of royalty income",
                    "type": "string"
                },
                "id": {
                    "description": "period ID",
                    "type": "string"
                },
                "meta_url": {
                    "description": "Real meta information URL",
                    "type": "string"
                },
                "number": {
                    "description": "is selected block height",
                    "type": "integer"
                },
                "profit": {
                    "description": "royalty profit amount",
                    "type": "string"
                },
                "reward": {
                    "description": "vote reward amount",
                    "type": "string"
                },
                "royaltyRatio": {
                    "description": "the royalty rate of the same period of SNFT, the unit is one ten thousandth",
                    "type": "integer"
                },
                "startNumber": {
                    "description": "starting the period block height",
                    "type": "integer"
                },
                "startTime": {
                    "description": "starting the period timestamp",
                    "type": "integer"
                },
                "timestamp": {
                    "description": "is selected timestamp",
                    "type": "integer"
                },
                "voter": {
                    "description": "voter",
                    "type": "string"
                },
                "weightAmount": {
                    "description": "hold block number amount",
                    "type": "integer"
                },
                "weightValue": {
                    "description": "snft value",
                    "type": "string"
                }
            }
        },
        "model.EventLog": {
            "type": "object",
            "properties": {
                "address": {
                    "description": "address",
                    "type": "string"
                },
                "blockNumber": {
                    "description": "transaction random number, transaction volume",
                    "type": "integer"
                },
                "data": {
                    "description": "data",
                    "type": "string"
                },
                "logIndex": {
                    "description": "transaction random number, transaction volume",
                    "type": "integer"
                },
                "removed": {
                    "description": "whether to remove",
                    "type": "boolean"
                },
                "topics": {
                    "description": "topic",
                    "type": "array",
                    "items": {
                        "description": "create transaction",
                        "type": "string"
                    }
                },
                "transactionHash": {
                    "description": "create transaction",
                    "type": "string"
                }
            }
        },
        "model.InternalTx": {
            "type": "object",
            "properties": {
                "from": {
                    "description": "address",
                    "type": "string"
                },
                "gas": {
                    "description": "transaction random number, transaction volume",
                    "type": "integer"
                },
                "index": {
                    "description": "transaction random number, transaction volume",
                    "type": "integer"
                },
                "op": {
                    "description": "Operation",
                    "type": "string"
                },
                "to": {
                    "description": "address",
                    "type": "string"
                },
                "txHash": {
                    "description": "create transaction",
                    "type": "string"
                },
                "value": {
                    "description": "The total amount of coins in the chain",
                    "type": "string"
                }
            }
        },
        "model.NFT": {
            "type": "object",
            "properties": {
                "address": {
                    "description": "NFT address, grows automatically from 0x1",
                    "type": "string"
                },
                "block_number": {
                    "description": "The height of the created block",
                    "type": "integer"
                },
                "creator": {
                    "description": "Creator address",
                    "type": "string"
                },
                "exchanger_addr": {
                    "description": "The address of the exchange, if there is none, it can be traded on any exchange",
                    "type": "string"
                },
                "last_price": {
                    "description": "The last transaction price (null if the transaction is not completed), the unit is wei",
                    "type": "string"
                },
                "meta_url": {
                    "description": "Real meta information URL",
                    "type": "string"
                },
                "owner": {
                    "description": "owner",
                    "type": "string"
                },
                "royalty_ratio": {
                    "description": "Royalty rate, in ten thousandths",
                    "type": "integer"
                },
                "timestamp": {
                    "description": "Create timestamp",
                    "type": "integer"
                },
                "tx_amount": {
                    "description": "the total transaction volume of this NFT",
                    "type": "string"
                },
                "tx_hash": {
                    "description": "The transaction hash created",
                    "type": "string"
                }
            }
        },
        "model.NFTTx": {
            "type": "object",
            "properties": {
                "block_number": {
                    "description": "block number",
                    "type": "integer"
                },
                "exchanger_addr": {
                    "description": "Exchange address",
                    "type": "string"
                },
                "fee": {
                    "description": "Transaction fee, in wei (only if there is an exchange and price)",
                    "type": "string"
                },
                "from": {
                    "description": "Seller",
                    "type": "string"
                },
                "nft_addr": {
                    "description": "The NFT address of the transaction",
                    "type": "string"
                },
                "price": {
                    "description": "price, the unit is wei",
                    "type": "string"
                },
                "royalty": {
                    "description": "for the creator royalty",
                    "type": "string"
                },
                "timestamp": {
                    "description": "transaction timestamp",
                    "type": "integer"
                },
                "to": {
                    "description": "buyer",
                    "type": "string"
                },
                "tx_hash": {
                    "description": "transaction hash",
                    "type": "string"
                },
                "tx_type": {
                    "description": "Transaction type, 1: transfer, 6:recycle, 7:pledge, 8:cancel pledge 14: bid transaction, 15: fixed price purchase, 16: lazy price purchase, 17: lazy price purchase, 18: bid transaction, 19: lazy bid transaction, 20: matching transaction",
                    "type": "integer"
                }
            }
        },
        "model.Penalty": {
            "type": "object",
            "properties": {
                "address": {
                    "description": "address",
                    "type": "string"
                },
                "weight": {
                    "description": "transaction random number, transaction volume",
                    "type": "integer"
                }
            }
        },
        "model.Pledge": {
            "type": "object",
            "properties": {
                "amount": {
                    "description": "pledge amount",
                    "type": "string"
                },
                "block_number": {
                    "description": "latest block",
                    "type": "integer"
                },
                "staker": {
                    "description": "staker address",
                    "type": "string"
                },
                "timestamp": {
                    "description": "latest time",
                    "type": "integer"
                },
                "tx_hash": {
                    "description": "the transaction created",
                    "type": "string"
                },
                "validator": {
                    "description": "validator address",
                    "type": "string"
                }
            }
        },
        "model.Reward": {
            "type": "object",
            "properties": {
                "address": {
                    "description": "reward address",
                    "type": "string"
                },
                "amount": {
                    "description": "Amount of reward",
                    "type": "string"
                },
                "block_number": {
                    "description": "The block number when rewarding",
                    "type": "integer"
                },
                "identity": {
                    "description": "Identity, 1: block producer, 2: validator, 3, staker",
                    "type": "integer"
                },
                "proxy": {
                    "description": "proxy address",
                    "type": "string"
                },
                "snft": {
                    "description": "SNFT address",
                    "type": "string"
                }
            }
        },
        "model.SNFT": {
            "type": "object",
            "properties": {
                "address": {
                    "description": "SNFT address",
                    "type": "string"
                },
                "last_price": {
                    "description": "The last transaction price, the unit is wei, null if the transaction has not been completed",
                    "type": "string"
                },
                "owner": {
                    "description": "owner, unallocated and reclaimed are null",
                    "type": "string"
                },
                "pieces": {
                    "description": "snft pieces number",
                    "type": "integer"
                },
                "remove": {
                    "description": "SNFTs that are synthesized and then removed",
                    "type": "boolean"
                },
                "reward_at": {
                    "description": "The timestamp of the last rewarded, null if not rewarded",
                    "type": "integer"
                },
                "reward_number": {
                    "description": "The height of the last rewarded block",
                    "type": "integer"
                },
                "tx_amount": {
                    "description": "the total transaction volume of this SNFT",
                    "type": "string"
                }
            }
        },
        "model.Staker": {
            "type": "object",
            "properties": {
                "address": {
                    "description": "staker address",
                    "type": "string"
                },
                "amount": {
                    "description": "pledge amount",
                    "type": "string"
                },
                "block_number": {
                    "description": "the block number when created",
                    "type": "integer"
                },
                "reward": {
                    "description": "amount of total reward",
                    "type": "string"
                },
                "reward_count": {
                    "description": "reward snft count",
                    "type": "integer"
                },
                "timestamp": {
                    "description": "create time",
                    "type": "integer"
                },
                "tx_hash": {
                    "description": "the transaction created",
                    "type": "string"
                }
            }
        },
        "model.Stats": {
            "type": "object",
            "properties": {
                "activeAccount": {
                    "description": "The number of active account",
                    "type": "integer"
                },
                "avgBlockTime": {
                    "description": "average block time, ms",
                    "type": "integer"
                },
                "chainId": {
                    "description": "chain id",
                    "type": "integer"
                },
                "genesisBalance": {
                    "description": "Total amount of coins created",
                    "type": "string"
                },
                "ready": {
                    "description": "ready, sync latest block",
                    "type": "boolean"
                },
                "rewardCoinCount": {
                    "description": "Total number of times to get coin rewards, 0.1ERB once",
                    "type": "integer"
                },
                "rewardSNFTCount": {
                    "description": "Total number of times to get SNFT rewards",
                    "type": "integer"
                },
                "total24HNFT": {
                    "description": "Total number of NFT within 24 hours",
                    "type": "integer"
                },
                "total24HStakerTx": {
                    "description": "Total number of staker transactions within 24 hours",
                    "type": "integer"
                },
                "total24HTx": {
                    "description": "Total number of transactions within 24 hours",
                    "type": "integer"
                },
                "totalAccount": {
                    "description": "Total account number of used",
                    "type": "integer"
                },
                "totalAmount": {
                    "description": "total transaction volume",
                    "type": "string"
                },
                "totalBalance": {
                    "description": "The total amount of coins in the chain",
                    "type": "string"
                },
                "totalBlackHole": {
                    "description": "Total number of BlackHole blocks",
                    "type": "integer"
                },
                "totalBlock": {
                    "description": "Total number of blocks",
                    "type": "integer"
                },
                "totalCreator": {
                    "description": "Total number of creator",
                    "type": "integer"
                },
                "totalEpoch": {
                    "description": "Total number of epoch",
                    "type": "integer"
                },
                "totalErbieTx": {
                    "description": "Total number of  erbie transactions",
                    "type": "integer"
                },
                "totalInternalTx": {
                    "description": "Total number of internal transactions",
                    "type": "integer"
                },
                "totalNFT": {
                    "description": "Total number of NFTs",
                    "type": "integer"
                },
                "totalNFTAmount": {
                    "description": "Total transaction volume of NFTs",
                    "type": "string"
                },
                "totalNFTCreator": {
                    "description": "Total creator of NFTs",
                    "type": "integer"
                },
                "totalNFTTx": {
                    "description": "Total number of  NFT transactions",
                    "type": "integer"
                },
                "totalPledge": {
                    "description": "Total amount of  pledge",
                    "type": "string"
                },
                "totalProfit": {
                    "description": "Total number of creator profit",
                    "type": "string"
                },
                "totalRecycle": {
                    "description": "Total number of recycle SNFT",
                    "type": "integer"
                },
                "totalSNFT": {
                    "description": "Total number of SNFTs",
                    "type": "integer"
                },
                "totalSNFTAmount": {
                    "description": "Total transaction volume of SNFTs",
                    "type": "string"
                },
                "totalSNFTCreator": {
                    "description": "Total creator of SNFTs",
                    "type": "integer"
                },
                "totalSNFTTx": {
                    "description": "Total number of  SNFT transactions",
                    "type": "integer"
                },
                "totalStaker": {
                    "description": "Total number of stakers",
                    "type": "integer"
                },
                "totalStakerTx": {
                    "description": "Total number of staker  transactions",
                    "type": "integer"
                },
                "totalTransaction": {
                    "description": "Total number of transactions",
                    "type": "integer"
                },
                "totalTransferTx": {
                    "description": "Total number of  transfer transactions",
                    "type": "integer"
                },
                "totalValidator": {
                    "description": "Total number of validator",
                    "type": "integer"
                },
                "totalValidatorOnline": {
                    "description": "Total amount of validator online",
                    "type": "integer"
                }
            }
        },
        "model.Validator": {
            "type": "object",
            "properties": {
                "address": {
                    "description": "staking account",
                    "type": "string"
                },
                "amount": {
                    "description": "pledge amount",
                    "type": "string"
                },
                "block_number": {
                    "description": "The block number at latest updated",
                    "type": "integer"
                },
                "proxy": {
                    "description": "proxy address",
                    "type": "string"
                },
                "reward": {
                    "description": "amount of total reward",
                    "type": "string"
                },
                "reward_count": {
                    "description": "reward coin count",
                    "type": "integer"
                },
                "reward_number": {
                    "description": "The number at latest reward",
                    "type": "integer"
                },
                "score": {
                    "description": "node comprehensive score",
                    "type": "integer"
                },
                "timestamp": {
                    "description": "The time at latest updated",
                    "type": "integer"
                },
                "weight": {
                    "description": "online weight,if it is not 70, it means that it is not online",
                    "type": "integer"
                }
            }
        },
        "service.AccountRes": {
            "type": "object",
            "properties": {
                "address": {
                    "description": "address",
                    "type": "string"
                },
                "balance": {
                    "description": "The total amount of coins in the chain",
                    "type": "string"
                },
                "code": {
                    "description": "bytecode",
                    "type": "string"
                },
                "createdTx": {
                    "description": "create transaction",
                    "type": "string"
                },
                "creator": {
                    "description": "address",
                    "type": "string"
                },
                "lastNumber": {
                    "type": "integer"
                },
                "name": {
                    "description": "name",
                    "type": "string"
                },
                "nftCount": {
                    "description": "hold NFT number",
                    "type": "integer"
                },
                "nonce": {
                    "description": "transaction random number, transaction volume",
                    "type": "integer"
                },
                "number": {
                    "description": "transaction random number, transaction volume",
                    "type": "integer"
                },
                "profit": {
                    "description": "royalty profit",
                    "type": "string"
                },
                "reward": {
                    "description": "vote profit",
                    "type": "string"
                },
                "rewardCoinCount": {
                    "description": "Number of times to get coin rewards, 0.1ERB once",
                    "type": "integer"
                },
                "rewardSNFTCount": {
                    "description": "Number of times to get SNFT rewards",
                    "type": "integer"
                },
                "snftCount": {
                    "description": "hold SNFT number",
                    "type": "integer"
                },
                "snftValue": {
                    "description": "hold SNFT value",
                    "type": "string"
                },
                "stakerAmount": {
                    "description": "staker pledge amount",
                    "type": "string"
                },
                "symbol": {
                    "description": "symbol",
                    "type": "string"
                },
                "type": {
                    "description": "contract types, ERC20, ERC721, ERC1155",
                    "type": "integer"
                },
                "validatorAmount": {
                    "description": "validator pledge amount",
                    "type": "string"
                },
                "validatorReward": {
                    "description": "validator reward",
                    "type": "string"
                },
                "weight": {
                    "description": "online weight,if it is not 70, it means that it is not online",
                    "type": "integer"
                }
            }
        },
        "service.AccountsRes": {
            "type": "object",
            "properties": {
                "accounts": {
                    "description": "Account list",
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "address": {
                                "description": "address",
                                "type": "string"
                            },
                            "balance": {
                                "description": "The total amount of coins in the chain",
                                "type": "string"
                            },
                            "code": {
                                "description": "bytecode",
                                "type": "string"
                            },
                            "createdTx": {
                                "description": "create transaction",
                                "type": "string"
                            },
                            "creator": {
                                "description": "address",
                                "type": "string"
                            },
                            "name": {
                                "description": "name",
                                "type": "string"
                            },
                            "nonce": {
                                "description": "transaction random number, transaction volume",
                                "type": "integer"
                            },
                            "number": {
                                "description": "transaction random number, transaction volume",
                                "type": "integer"
                            },
                            "snftCount": {
                                "description": "hold SNFT number",
                                "type": "integer"
                            },
                            "snftValue": {
                                "description": "hold SNFT value",
                                "type": "string"
                            },
                            "stakerAmount": {
                                "description": "staker pledge amount",
                                "type": "string"
                            },
                            "symbol": {
                                "description": "symbol",
                                "type": "string"
                            },
                            "type": {
                                "description": "contract types, ERC20, ERC721, ERC1155",
                                "type": "integer"
                            },
                            "validatorAmount": {
                                "description": "validator pledge amount",
                                "type": "string"
                            }
                        }
                    }
                },
                "balance": {
                    "description": "The total amount of coins in the chain",
                    "type": "string"
                },
                "total": {
                    "description": "Total number of accounts",
                    "type": "integer"
                }
            }
        },
        "service.BlocksRes": {
            "type": "object",
            "properties": {
                "blocks": {
                    "description": "block list",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.Block"
                    }
                },
                "total": {
                    "description": "The total number of blocks",
                    "type": "integer"
                }
            }
        },
        "service.CreatorsRes": {
            "type": "object",
            "properties": {
                "creators": {
                    "description": "List of creator",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.Creator"
                    }
                },
                "total": {
                    "description": "The total number of creator",
                    "type": "integer"
                }
            }
        },
        "service.EpochsRes": {
            "type": "object",
            "properties": {
                "epochs": {
                    "description": "List of system NFT periods",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.Epoch"
                    }
                },
                "total": {
                    "description": "The total number of NFT periods in the system",
                    "type": "integer"
                }
            }
        },
        "service.ErrRes": {
            "type": "object",
            "properties": {
                "err_str": {
                    "description": "Error message",
                    "type": "string"
                }
            }
        },
        "service.InternalTxsRes": {
            "type": "object",
            "properties": {
                "internal_txs": {
                    "description": "transaction list",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.InternalTx"
                    }
                },
                "total": {
                    "description": "The total number",
                    "type": "integer"
                }
            }
        },
        "service.LineChartRes": {
            "type": "object",
            "properties": {
                "blocks": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "number": {
                                "type": "integer"
                            },
                            "txCount": {
                                "type": "integer"
                            }
                        }
                    }
                },
                "stakers": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "day": {
                                "type": "string"
                            },
                            "index": {
                                "type": "integer"
                            },
                            "num": {
                                "type": "integer"
                            }
                        }
                    }
                },
                "txs": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "gasPrice": {
                                "type": "integer"
                            },
                            "hash": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "service.LocationRes": {
            "type": "object",
            "properties": {
                "address": {
                    "description": "account address",
                    "type": "string"
                },
                "latitude": {
                    "description": "latitude",
                    "type": "number"
                },
                "longitude": {
                    "description": "longitude",
                    "type": "number"
                },
                "proxy": {
                    "description": "proxy address",
                    "type": "string"
                }
            }
        },
        "service.Msg": {
            "type": "object",
            "properties": {
                "from": {
                    "type": "string"
                },
                "to": {
                    "type": "string"
                }
            }
        },
        "service.NFTChartRes": {
            "type": "object",
            "properties": {
                "hour": {
                    "description": "hour",
                    "type": "integer"
                },
                "num": {
                    "description": "number of nft",
                    "type": "integer"
                }
            }
        },
        "service.NFTTxsRes": {
            "type": "object",
            "properties": {
                "nft_txs": {
                    "description": "NFT transaction list",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.NFTTx"
                    }
                },
                "total": {
                    "description": "The total number of NFTs",
                    "type": "integer"
                }
            }
        },
        "service.NFTsRes": {
            "type": "object",
            "properties": {
                "nfts": {
                    "description": "NFT list",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.NFT"
                    }
                },
                "total": {
                    "description": "The total number of NFTs",
                    "type": "integer"
                }
            }
        },
        "service.PledgesRes": {
            "type": "object",
            "properties": {
                "data": {
                    "description": "pledge list",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.Pledge"
                    }
                },
                "total": {
                    "description": "The total number of pledges",
                    "type": "integer"
                }
            }
        },
        "service.RankingNFTRes": {
            "type": "object",
            "properties": {
                "data": {
                    "description": "NFT list",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.NFT"
                    }
                },
                "total": {
                    "description": "The total number of NFTs",
                    "type": "integer"
                }
            }
        },
        "service.RankingSNFTRes": {
            "type": "object",
            "properties": {
                "data": {
                    "description": "SNFT list",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.SNFT"
                    }
                },
                "total": {
                    "description": "The total number of SNFTs",
                    "type": "integer"
                }
            }
        },
        "service.RankingStakerRes": {
            "type": "object",
            "properties": {
                "data": {
                    "description": "Staker list",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.Staker"
                    }
                },
                "total": {
                    "description": "The total number of Staker",
                    "type": "integer"
                }
            }
        },
        "service.RewardsRes": {
            "type": "object",
            "properties": {
                "rewards": {
                    "description": "Rewards list",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.Reward"
                    }
                },
                "total": {
                    "description": "The total number of rewards",
                    "type": "integer"
                }
            }
        },
        "service.SNFTRes": {
            "type": "object",
            "properties": {
                "address": {
                    "description": "SNFT address",
                    "type": "string"
                },
                "createdAt": {
                    "description": "snft created time",
                    "type": "integer"
                },
                "creator": {
                    "description": "creator address, also the address of royalty income",
                    "type": "string"
                },
                "last_price": {
                    "description": "The last transaction price, the unit is wei, null if the transaction has not been completed",
                    "type": "string"
                },
                "meta_url": {
                    "description": "Real meta information URL",
                    "type": "string"
                },
                "owner": {
                    "description": "owner, unallocated and reclaimed are null",
                    "type": "string"
                },
                "pieces": {
                    "description": "snft pieces number",
                    "type": "integer"
                },
                "remove": {
                    "description": "SNFTs that are synthesized and then removed",
                    "type": "boolean"
                },
                "reward_at": {
                    "description": "The timestamp of the last rewarded, null if not rewarded",
                    "type": "integer"
                },
                "reward_number": {
                    "description": "The height of the last rewarded block",
                    "type": "integer"
                },
                "royaltyRatio": {
                    "description": "the royalty rate of the same period of SNFT, the unit is one ten thousandth",
                    "type": "integer"
                },
                "tx_amount": {
                    "description": "the total transaction volume of this SNFT",
                    "type": "string"
                }
            }
        },
        "service.SNFTsAndMetaRes": {
            "type": "object",
            "properties": {
                "nfts": {
                    "description": "SNFT list",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/service.SNFTRes"
                    }
                },
                "total": {
                    "description": "The total number of SNFTs",
                    "type": "integer"
                }
            }
        },
        "service.SNFTsRes": {
            "type": "object",
            "properties": {
                "nfts": {
                    "description": "SNFT list",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.SNFT"
                    }
                },
                "total": {
                    "description": "The total number of SNFTs",
                    "type": "integer"
                }
            }
        },
        "service.StakersRes": {
            "type": "object",
            "properties": {
                "data": {
                    "description": "List of stakers",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.Staker"
                    }
                },
                "total": {
                    "description": "Total number of stakers",
                    "type": "integer"
                }
            }
        },
        "service.TransactionRes": {
            "type": "object",
            "properties": {
                "blockHash": {
                    "description": "create transaction",
                    "type": "string"
                },
                "blockNumber": {
                    "description": "transaction random number, transaction volume",
                    "type": "integer"
                },
                "contractAddress": {
                    "description": "address",
                    "type": "string"
                },
                "cumulativeGasUsed": {
                    "description": "transaction random number, transaction volume",
                    "type": "integer"
                },
                "error": {
                    "description": "exec error",
                    "type": "string"
                },
                "from": {
                    "description": "address",
                    "type": "string"
                },
                "gas": {
                    "description": "transaction random number, transaction volume",
                    "type": "integer"
                },
                "gasPrice": {
                    "description": "transaction random number, transaction volume",
                    "type": "integer"
                },
                "gasUsed": {
                    "description": "transaction random number, transaction volume",
                    "type": "integer"
                },
                "hash": {
                    "description": "create transaction",
                    "type": "string"
                },
                "input": {
                    "description": "Additional input data, contract call encoded data",
                    "type": "string"
                },
                "nonce": {
                    "description": "transaction random number, transaction volume",
                    "type": "integer"
                },
                "status": {
                    "description": "transaction random number, transaction volume",
                    "type": "integer"
                },
                "timestamp": {
                    "description": "The event stamp of the block it is in",
                    "type": "integer"
                },
                "to": {
                    "description": "address",
                    "type": "string"
                },
                "transactionIndex": {
                    "description": "transaction random number, transaction volume",
                    "type": "integer"
                },
                "value": {
                    "description": "The total amount of coins in the chain",
                    "type": "string"
                }
            }
        },
        "service.TransactionsRes": {
            "type": "object",
            "properties": {
                "total": {
                    "description": "The total number of transactions",
                    "type": "integer"
                },
                "transactions": {
                    "description": "transaction list",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/service.TransactionRes"
                    }
                }
            }
        },
        "service.TxChartRes": {
            "type": "object",
            "properties": {
                "hour": {
                    "description": "hour",
                    "type": "integer"
                },
                "num": {
                    "description": "number of transaction",
                    "type": "integer"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "block explorer API",
	Description:      "Block browser back-end interface, parses data from the blockchain, provides information retrieval services for blocks, transactions, NFT, SNFT, validators, and rewards",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
