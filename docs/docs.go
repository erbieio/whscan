// Package docs GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag
package docs

import (
	"bytes"
	"encoding/json"
	"strings"
	"text/template"

	"github.com/swaggo/swag"
)

var doc = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/account/page": {
            "get": {
                "description": "set the account ranking according to the amount of coins held",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "block"
                ],
                "summary": "query top accounts",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Page, default 1",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Page size, default 10",
                        "name": "page_size",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/service.AccountsRes"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/service.ErrRes"
                        }
                    }
                }
            }
        },
        "/block/getBlock": {
            "get": {
                "description": "query block",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "obsolete interface"
                ],
                "summary": "query block (new /block/{number})",
                "deprecated": true,
                "parameters": [
                    {
                        "type": "string",
                        "description": "block number",
                        "name": "block_number",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.GetBlockRes"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.ErrRes"
                        }
                    }
                }
            }
        },
        "/block/getTransaction": {
            "get": {
                "description": "query transaction",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "obsolete interface"
                ],
                "summary": "query transaction (new /transaction/{hash})",
                "deprecated": true,
                "parameters": [
                    {
                        "type": "string",
                        "description": "Transaction hash",
                        "name": "tx_hash",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.GetTxRes"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.ErrRes"
                        }
                    }
                }
            }
        },
        "/block/getTransactionLogs": {
            "get": {
                "description": "query receipt",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "obsolete interface"
                ],
                "summary": "query receipt (new /transaction_logs/{hash})",
                "deprecated": true,
                "parameters": [
                    {
                        "type": "string",
                        "description": "Transaction hash",
                        "name": "tx_hash",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.GetReceiptsRes"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.ErrRes"
                        }
                    }
                }
            }
        },
        "/block/page": {
            "get": {
                "description": "Query the block list in reverse order of height",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "block"
                ],
                "summary": "query block list",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Page, default 1",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Page size, default 10",
                        "name": "page_size",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/service.BlocksRes"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/service.ErrRes"
                        }
                    }
                }
            }
        },
        "/block/viewBlocks": {
            "get": {
                "description": "query block list",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "obsolete interface"
                ],
                "summary": "query block list (new /block/page)",
                "deprecated": true,
                "parameters": [
                    {
                        "type": "integer",
                        "description": "page",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "page number",
                        "name": "page_size",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.ViewBlocksRes"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.ErrRes"
                        }
                    }
                }
            }
        },
        "/block/viewTransactions": {
            "get": {
                "description": "query transaction list",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "obsolete interface"
                ],
                "summary": "query transaction list (new /transaction/page)",
                "deprecated": true,
                "parameters": [
                    {
                        "type": "string",
                        "description": "Address does not distinguish transmission",
                        "name": "address",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Block number is indistinguishable",
                        "name": "block_number",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "page",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "page number",
                        "name": "page_size",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.ViewTxsRes"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.ErrRes"
                        }
                    }
                }
            }
        },
        "/block/{number}": {
            "get": {
                "description": "specifies the number query block",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "block"
                ],
                "summary": "query block",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Block number",
                        "name": "number",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Block"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/service.ErrRes"
                        }
                    }
                }
            }
        },
        "/collection/page": {
            "get": {
                "description": "Query NFT collection list in reverse order of created block height",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "NFT Collection"
                ],
                "summary": "Query the list of NFT collections",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Exchange, if empty, query all exchanges",
                        "name": "exchanger",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Creator, if empty, query all",
                        "name": "creator",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Type: all, nft, snft, default all",
                        "name": "type",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Page, default 1",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Page size, default 10",
                        "name": "page_size",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/service.CollectionsRes"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/service.ErrRes"
                        }
                    }
                }
            }
        },
        "/collection/{id}": {
            "get": {
                "description": "specifies the ID to query the NFT collection information",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "NFT Collection"
                ],
                "summary": "query NFT collection",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Collection ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Collection"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/service.ErrRes"
                        }
                    }
                }
            }
        },
        "/epoch": {
            "get": {
                "description": "Query the system NFT period list in reverse order of creation time",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "system NFT period"
                ],
                "summary": "Query the system NFT period list",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Page, default 1",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Page size, default 10",
                        "name": "page_size",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/service.EpochsRes"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/service.ErrRes"
                        }
                    }
                }
            }
        },
        "/epoch/{id}": {
            "get": {
                "description": "specifies the ID to query the NFT period information of the system, including 16 collection information",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "system NFT period"
                ],
                "summary": "Query system NFT period",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Period ID, current means query the current period",
                        "name": "id",
                        "in": "path"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Epoch"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/service.ErrRes"
                        }
                    }
                }
            }
        },
        "/erb_faucet": {
            "get": {
                "description": "request ERB test coins",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "other interfaces"
                ],
                "summary": "request ERB test coins",
                "parameters": [
                    {
                        "type": "string",
                        "description": "address",
                        "name": "addr",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/service.ErrRes"
                        }
                    }
                }
            }
        },
        "/erb_price": {
            "get": {
                "description": "Query an ERB price, 1ERB=10^18wei, failed to implement the ERB price definition, fixed at 1ERB=1USD",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "other interfaces"
                ],
                "summary": "query ERB price",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.price"
                        }
                    }
                }
            }
        },
        "/exchanger/get": {
            "get": {
                "description": "Query exchanges by address",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "obsolete interface"
                ],
                "summary": "query exchange (new /exchanger/{addr})",
                "deprecated": true,
                "parameters": [
                    {
                        "type": "string",
                        "description": "Exchange address",
                        "name": "addr",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Exchanger"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/service.ErrRes"
                        }
                    }
                }
            }
        },
        "/exchanger/page": {
            "get": {
                "description": "Query the list of exchanges in reverse order of creation time",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Exchange"
                ],
                "summary": "Query the list of exchanges",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Exchange name, if empty, query all exchanges",
                        "name": "name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Page, default 1",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Page size, default 10",
                        "name": "page_size",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/service.ExchangersRes"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/service.ErrRes"
                        }
                    }
                }
            }
        },
        "/exchanger/{addr}": {
            "get": {
                "description": "Query exchanges by address",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Exchange"
                ],
                "summary": "query exchange",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Exchange address",
                        "name": "addr",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Exchanger"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/service.ErrRes"
                        }
                    }
                }
            }
        },
        "/exchanger_auth": {
            "get": {
                "description": "query exchange status",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "other interfaces"
                ],
                "summary": "query exchange status",
                "parameters": [
                    {
                        "type": "string",
                        "description": "address",
                        "name": "addr",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.AuthRes"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/service.ErrRes"
                        }
                    }
                }
            }
        },
        "/extra/checkAuth": {
            "get": {
                "description": "query exchange status",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "obsolete interface"
                ],
                "summary": "query exchange status (new /exchanger_auth)",
                "deprecated": true,
                "parameters": [
                    {
                        "type": "string",
                        "description": "Address",
                        "name": "address",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.CheckAuthRes"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.ErrRes"
                        }
                    }
                }
            }
        },
        "/extra/requestErbTest": {
            "get": {
                "description": "request ERB test coins",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "obsolete interface"
                ],
                "summary": "request ERB test coin (new /erb_faucet)",
                "deprecated": true,
                "parameters": [
                    {
                        "type": "string",
                        "description": "Address",
                        "name": "address",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.requestErbTestRes"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.requestErbTestRes"
                        }
                    }
                }
            }
        },
        "/nft/page": {
            "get": {
                "description": "Query the NFT list in reverse order of creation time",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "NFT"
                ],
                "summary": "query NFT list",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Exchange, if empty, query all exchanges",
                        "name": "exchanger",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Owner, if empty, query all",
                        "name": "owner",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "collection id, if empty, query all",
                        "name": "collection_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Page, default 1",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Page size, default 10",
                        "name": "page_size",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/service.UserNFTsRes"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/service.ErrRes"
                        }
                    }
                }
            }
        },
        "/nft/tx/page": {
            "get": {
                "description": "Query the list of NFT transactions in reverse order of creation time",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "NFT"
                ],
                "summary": "Query NFT transaction list",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Specify the NFT address, if empty, query all addresses",
                        "name": "address",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Exchange, if empty, query all exchanges",
                        "name": "exchanger",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Specify an account, if empty, query all accounts",
                        "name": "account",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Page, default 1",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Page size, default 10",
                        "name": "page_size",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/service.NFTTxsRes"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/service.ErrRes"
                        }
                    }
                }
            }
        },
        "/nft_meta/page": {
            "get": {
                "description": "query the NFT list containing meta information in reverse order of creation time",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "NFT"
                ],
                "summary": "query contains meta information NFT list",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Exchange, if empty, query all exchanges",
                        "name": "exchanger",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Owner, if empty, query all",
                        "name": "owner",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "collection id, if empty, query all",
                        "name": "collection_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Page, default 1",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Page size, default 10",
                        "name": "page_size",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/service.UserNFTsRes"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/service.ErrRes"
                        }
                    }
                }
            }
        },
        "/reward": {
            "get": {
                "description": "query the reward list in reverse order",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "reward"
                ],
                "summary": "Query the reward list",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Page, default 1",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Page size, default 10",
                        "name": "page_size",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/service.RewardsRes"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/service.ErrRes"
                        }
                    }
                }
            }
        },
        "/reward/{block}": {
            "get": {
                "description": "specifies the block query reward",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "reward"
                ],
                "summary": "query reward",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Block height",
                        "name": "block",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.Reward"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/service.ErrRes"
                        }
                    }
                }
            }
        },
        "/snft/block": {
            "get": {
                "description": "Query the list of SNFT rewards for the specified block",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "NFT"
                ],
                "summary": "Query blocks SNFT list",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Block number",
                        "name": "number",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.SNFT"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/service.ErrRes"
                        }
                    }
                }
            }
        },
        "/snft/collection/page": {
            "get": {
                "description": "Query the collection list (including 16 FullNFT information) held by the specified account (with one SNFT in the collection)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "NFT"
                ],
                "summary": "paging query account holding collection list",
                "parameters": [
                    {
                        "type": "string",
                        "description": "owner",
                        "name": "owner",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Page, default 1",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Page size, default 10",
                        "name": "page_size",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/service.SNFTGroupsRes"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/service.ErrRes"
                        }
                    }
                }
            }
        },
        "/snft/group/{id}": {
            "get": {
                "description": "Query the information of 256 SNFTs under the FullNFT of the specified ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "NFT"
                ],
                "summary": "Query the list of 256 SNFTs of the specified FullNFT",
                "parameters": [
                    {
                        "type": "string",
                        "description": "FullNFT ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.SNFT"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/service.ErrRes"
                        }
                    }
                }
            }
        },
        "/snft/page": {
            "get": {
                "description": "Query the SNFT list in reverse order of creation time",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "NFT"
                ],
                "summary": "query SNFT list",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Owner, if empty, query all",
                        "name": "owner",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Page, default 1",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Page size, default 10",
                        "name": "page_size",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/service.SNFTsRes"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/service.ErrRes"
                        }
                    }
                }
            }
        },
        "/snft_meta/page": {
            "get": {
                "description": "Query the list of SNFTs with meta information in reverse order of creation time",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "NFT"
                ],
                "summary": "Query a list of SNFTs with meta information",
                "parameters": [
                    {
                        "type": "string",
                        "description": "collection id, if empty, query all",
                        "name": "collection_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Owner, if empty, query all",
                        "name": "owner",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Page, default 1",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Page size, default 10",
                        "name": "page_size",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/service.SNFTsAndMetaRes"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/service.ErrRes"
                        }
                    }
                }
            }
        },
        "/subscription": {
            "get": {
                "description": "Query the list of subscription mailboxes",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "other interfaces"
                ],
                "summary": "Query the list of subscription mailboxes",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Page, default 1",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Page size, default 10",
                        "name": "page_size",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.Subscription"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/service.ErrRes"
                        }
                    }
                }
            },
            "post": {
                "description": "Enter the email address to receive the latest event notifications",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "other interfaces"
                ],
                "summary": "subscribe email",
                "parameters": [
                    {
                        "description": "Mailbox",
                        "name": "_",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.Subscribe"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/service.ErrRes"
                        }
                    }
                }
            }
        },
        "/transaction/page": {
            "get": {
                "description": "query transaction list in reverse order",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "transaction"
                ],
                "summary": "query transaction list",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Page, default 1",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Page size, default 10",
                        "name": "page_size",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Block number, if empty, query all",
                        "name": "number",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Account address, if empty, query all",
                        "name": "addr",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/service.TransactionsRes"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/service.ErrRes"
                        }
                    }
                }
            }
        },
        "/transaction/{hash}": {
            "get": {
                "description": "specifies the hash query transaction",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "transaction"
                ],
                "summary": "query transaction",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Transaction hash",
                        "name": "hash",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Transaction"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/service.ErrRes"
                        }
                    }
                }
            }
        },
        "/transaction_logs/{hash}": {
            "get": {
                "description": "specifies the transaction hash to query the transaction receipt",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "transaction"
                ],
                "summary": "query transaction receipt",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Transaction hash",
                        "name": "hash",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.Log"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/service.ErrRes"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "api.AuthRes": {
            "type": "object",
            "properties": {
                "exchanger_balance": {
                    "type": "string"
                },
                "exchanger_flag": {
                    "type": "boolean"
                },
                "status": {
                    "description": "2 The payment status of the exchange is normal, other numbers are arrears or no payment",
                    "type": "integer"
                }
            }
        },
        "api.CheckAuthRes": {
            "type": "object",
            "properties": {
                "code": {
                    "description": "0 success 1 wrong address other failure",
                    "type": "integer"
                },
                "data": {
                    "$ref": "#/definitions/api.AuthRes"
                },
                "msg": {
                    "type": "string"
                }
            }
        },
        "api.ErrRes": {
            "type": "object",
            "properties": {
                "err": {
                    "description": "Error message",
                    "type": "string"
                }
            }
        },
        "api.GetBlockRes": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "data": {
                    "$ref": "#/definitions/service.Block"
                },
                "msg": {
                    "type": "string"
                }
            }
        },
        "api.GetReceiptsRes": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/service.Log"
                    }
                },
                "msg": {
                    "type": "string"
                }
            }
        },
        "api.GetTxRes": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "data": {
                    "$ref": "#/definitions/service.Transaction"
                },
                "msg": {
                    "type": "string"
                }
            }
        },
        "api.Subscribe": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                }
            }
        },
        "api.ViewBlocksRes": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/service.Block"
                    }
                },
                "msg": {
                    "type": "string"
                },
                "total": {
                    "type": "integer"
                }
            }
        },
        "api.ViewTxsRes": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/service.Transaction"
                    }
                },
                "msg": {
                    "type": "string"
                },
                "total": {
                    "type": "integer"
                }
            }
        },
        "api.price": {
            "type": "object",
            "properties": {
                "CNY": {
                    "description": "The price of an ERB in RMB",
                    "type": "number"
                },
                "USD": {
                    "description": "The price of an ERB in USD",
                    "type": "number"
                }
            }
        },
        "api.requestErbTestRes": {
            "type": "object",
            "properties": {
                "code": {
                    "description": "0 success 1 wrong address other failure",
                    "type": "integer"
                },
                "msg": {
                    "type": "string"
                }
            }
        },
        "model.Account": {
            "type": "object",
            "properties": {
                "ERC": {
                    "description": "ERC types, ERC20, ERC721, ERC1155",
                    "type": "integer"
                },
                "address": {
                    "description": "address",
                    "type": "string"
                },
                "balance": {
                    "description": "balance",
                    "type": "string"
                },
                "code": {
                    "description": "bytecode",
                    "type": "string"
                },
                "createdTx": {
                    "description": "Create transaction",
                    "type": "string"
                },
                "creator": {
                    "description": "The creator, the contract account has value",
                    "type": "string"
                },
                "name": {
                    "description": "name",
                    "type": "string"
                },
                "symbol": {
                    "description": "symbol",
                    "type": "string"
                },
                "transactionCount": {
                    "description": "Transaction random number, transaction volume",
                    "type": "integer"
                }
            }
        },
        "model.Block": {
            "type": "object",
            "properties": {
                "difficulty": {
                    "description": "difficulty",
                    "type": "integer"
                },
                "extraData": {
                    "description": "Extra data",
                    "type": "string"
                },
                "gasLimit": {
                    "description": "Gas limit",
                    "type": "integer"
                },
                "gasUsed": {
                    "description": "Gas consumption",
                    "type": "integer"
                },
                "hash": {
                    "description": "Hash",
                    "type": "string"
                },
                "miner": {
                    "description": "miner",
                    "type": "string"
                },
                "mixHash": {
                    "description": "Mixed hash",
                    "type": "string"
                },
                "nonce": {
                    "description": "difficulty random number",
                    "type": "string"
                },
                "number": {
                    "description": "block number",
                    "type": "integer"
                },
                "parentHash": {
                    "description": "parent block hash",
                    "type": "string"
                },
                "receiptsRoot": {
                    "description": "Transaction receipt root hash",
                    "type": "string"
                },
                "sha3Uncles": {
                    "description": "Uncle root hash",
                    "type": "string"
                },
                "size": {
                    "description": "size",
                    "type": "integer"
                },
                "stateRoot": {
                    "description": "World tree root hash",
                    "type": "string"
                },
                "timestamp": {
                    "description": "timestamp",
                    "type": "integer"
                },
                "totalDifficulty": {
                    "description": "Total difficulty",
                    "type": "string"
                },
                "totalTransaction": {
                    "description": "Number of transactions",
                    "type": "integer"
                },
                "transactionsRoot": {
                    "description": "transaction root hash",
                    "type": "string"
                },
                "uncles": {
                    "description": "Uncle block hash",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "unclesCount": {
                    "description": "Number of uncle blocks",
                    "type": "integer"
                }
            }
        },
        "model.Collection": {
            "type": "object",
            "properties": {
                "block_number": {
                    "description": "Create block height, equal to the first NFT in the collection",
                    "type": "integer"
                },
                "category": {
                    "description": "category",
                    "type": "string"
                },
                "creator": {
                    "description": "Creator",
                    "type": "string"
                },
                "desc": {
                    "description": "description",
                    "type": "string"
                },
                "exchanger": {
                    "description": "belongs to the exchange",
                    "type": "string"
                },
                "id": {
                    "description": "ID",
                    "type": "string"
                },
                "img_url": {
                    "description": "image link",
                    "type": "string"
                },
                "meta_url": {
                    "description": "collection meta information URL",
                    "type": "string"
                },
                "name": {
                    "description": "name",
                    "type": "string"
                }
            }
        },
        "model.Epoch": {
            "type": "object",
            "properties": {
                "creator": {
                    "description": "Creator address, also the address of royalty income",
                    "type": "string"
                },
                "dir": {
                    "description": "meta information directory URL",
                    "type": "string"
                },
                "exchanger": {
                    "description": "Exchange address",
                    "type": "string"
                },
                "id": {
                    "description": "period ID",
                    "type": "string"
                },
                "number": {
                    "description": "Starting block height",
                    "type": "integer"
                },
                "royaltyRatio": {
                    "description": "The royalty rate of the same period of SNFT, the unit is one ten thousandth",
                    "type": "integer"
                },
                "timestamp": {
                    "description": "Starting timestamp",
                    "type": "integer"
                },
                "voteWeight": {
                    "description": "Weight",
                    "type": "string"
                }
            }
        },
        "model.Exchanger": {
            "type": "object",
            "properties": {
                "address": {
                    "description": "Exchange address",
                    "type": "string"
                },
                "balance_count": {
                    "description": "Total transaction amount, unit wei",
                    "type": "string"
                },
                "block_number": {
                    "description": "The block number when created",
                    "type": "integer"
                },
                "collection_count": {
                    "description": "Total number of collections, batch query of this field is invalid",
                    "type": "integer"
                },
                "creator": {
                    "description": "Creator address",
                    "type": "string"
                },
                "fee_ratio": {
                    "description": "fee rate, unit 1/10,000",
                    "type": "integer"
                },
                "is_open": {
                    "description": "Whether it is open",
                    "type": "boolean"
                },
                "name": {
                    "description": "Exchange name",
                    "type": "string"
                },
                "nft_count": {
                    "description": "Total NFT count",
                    "type": "integer"
                },
                "timestamp": {
                    "description": "Open time",
                    "type": "integer"
                },
                "tx_count": {
                    "description": "Total number of transactions, transfers are not counted",
                    "type": "integer"
                },
                "tx_hash": {
                    "description": "The transaction created",
                    "type": "string"
                },
                "url": {
                    "description": "Exchange URL",
                    "type": "string"
                }
            }
        },
        "model.Log": {
            "type": "object",
            "properties": {
                "address": {
                    "description": "The contract address",
                    "type": "string"
                },
                "data": {
                    "description": "data",
                    "type": "string"
                },
                "logIndex": {
                    "description": "The serial number in the transaction",
                    "type": "integer"
                },
                "removed": {
                    "description": "whether to remove",
                    "type": "boolean"
                },
                "topics": {
                    "description": "topic",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "transactionHash": {
                    "description": "The transaction hash",
                    "type": "string"
                }
            }
        },
        "model.NFTTx": {
            "type": "object",
            "properties": {
                "block_number": {
                    "description": "block number",
                    "type": "integer"
                },
                "exchanger_addr": {
                    "description": "Exchange address",
                    "type": "string"
                },
                "fee": {
                    "description": "Transaction fee, in wei (only if there is an exchange and price)",
                    "type": "string"
                },
                "from": {
                    "description": "Seller",
                    "type": "string"
                },
                "nft_addr": {
                    "description": "The NFT address of the transaction",
                    "type": "string"
                },
                "price": {
                    "description": "price, the unit is wei",
                    "type": "string"
                },
                "timestamp": {
                    "description": "Transaction timestamp",
                    "type": "integer"
                },
                "to": {
                    "description": "buyer",
                    "type": "string"
                },
                "tx_hash": {
                    "description": "transaction hash",
                    "type": "string"
                },
                "tx_type": {
                    "description": "Transaction type, 1: transfer, 2: bid transaction, 3: fixed price purchase, 4: lazy price purchase, 5: lazy price purchase, 6: bid transaction, 7: lazy bid transaction, 8: matching transaction",
                    "type": "integer"
                }
            }
        },
        "model.Reward": {
            "type": "object",
            "properties": {
                "address": {
                    "description": "reward address",
                    "type": "string"
                },
                "amount": {
                    "description": "Amount of reward",
                    "type": "string"
                },
                "block_number": {
                    "description": "The block number when rewarding",
                    "type": "integer"
                },
                "identity": {
                    "description": "Identity, 1: block producer, 2: verifier, 3, exchange",
                    "type": "integer"
                },
                "snft": {
                    "description": "SNFT address",
                    "type": "string"
                }
            }
        },
        "model.SNFT": {
            "type": "object",
            "properties": {
                "address": {
                    "description": "SNFT address",
                    "type": "string"
                },
                "awardee": {
                    "description": "The address of the miner that was rewarded last, null if it has not been rewarded",
                    "type": "string"
                },
                "last_price": {
                    "description": "The last transaction price, the unit is wei, null if the transaction has not been completed",
                    "type": "string"
                },
                "owner": {
                    "description": "owner, unallocated and reclaimed are null",
                    "type": "string"
                },
                "reward_at": {
                    "description": "The timestamp of the last rewarded, null if not rewarded",
                    "type": "integer"
                },
                "reward_number": {
                    "description": "The height of the last rewarded block, null if not rewarded",
                    "type": "integer"
                }
            }
        },
        "model.Subscription": {
            "type": "object",
            "properties": {
                "email": {
                    "description": "Email",
                    "type": "string"
                }
            }
        },
        "model.Transaction": {
            "type": "object",
            "properties": {
                "blockHash": {
                    "description": "Block Hash",
                    "type": "string"
                },
                "blockNumber": {
                    "description": "block number",
                    "type": "integer"
                },
                "contractAddress": {
                    "description": "The created contract address",
                    "type": "string"
                },
                "cumulativeGasUsed": {
                    "description": "Cumulative gas consumption",
                    "type": "integer"
                },
                "from": {
                    "description": "Send address",
                    "type": "string"
                },
                "gas": {
                    "description": "fuel",
                    "type": "integer"
                },
                "gasPrice": {
                    "description": "Gas price",
                    "type": "integer"
                },
                "gasUsed": {
                    "description": "Gas consumption",
                    "type": "integer"
                },
                "hash": {
                    "description": "Hash",
                    "type": "string"
                },
                "input": {
                    "description": "Additional input data, contract call encoded data",
                    "type": "string"
                },
                "methodId": {
                    "description": "Method ID, normal transaction is empty",
                    "type": "string"
                },
                "nonce": {
                    "description": "Random number, the number of transactions initiated by the account",
                    "type": "integer"
                },
                "status": {
                    "description": "Status, 1: success; 0: failure",
                    "type": "integer"
                },
                "to": {
                    "description": "Receive address",
                    "type": "string"
                },
                "transactionIndex": {
                    "description": "The serial number in the block",
                    "type": "integer"
                },
                "value": {
                    "description": "Amount, unit wei",
                    "type": "string"
                }
            }
        },
        "model.UserNFT": {
            "type": "object",
            "properties": {
                "address": {
                    "description": "NFT address, grows automatically from 0x1",
                    "type": "string"
                },
                "attributes": {
                    "description": "Attributes",
                    "type": "string"
                },
                "block_number": {
                    "description": "The height of the created block",
                    "type": "integer"
                },
                "category": {
                    "description": "category",
                    "type": "string"
                },
                "collection_id": {
                    "description": "The id of the collection, the name of the collection + the creator of the collection + the hash of the exchange where the collection is located",
                    "type": "string"
                },
                "creator": {
                    "description": "Creator address",
                    "type": "string"
                },
                "desc": {
                    "description": "description",
                    "type": "string"
                },
                "exchanger_addr": {
                    "description": "The address of the exchange, if there is none, it can be traded on any exchange",
                    "type": "string"
                },
                "last_price": {
                    "description": "The last transaction price (null if the transaction is not completed), the unit is wei",
                    "type": "string"
                },
                "meta_url": {
                    "description": "Real meta information URL",
                    "type": "string"
                },
                "name": {
                    "description": "name",
                    "type": "string"
                },
                "owner": {
                    "description": "owner",
                    "type": "string"
                },
                "raw_meta_url": {
                    "description": "Original meta information URL on the chain",
                    "type": "string"
                },
                "royalty_ratio": {
                    "description": "Royalty rate, in ten thousandths",
                    "type": "integer"
                },
                "source_url": {
                    "description": "Resource links, file links such as pictures or videos",
                    "type": "string"
                },
                "timestamp": {
                    "description": "Create timestamp",
                    "type": "integer"
                },
                "tx_hash": {
                    "description": "The transaction hash created",
                    "type": "string"
                }
            }
        },
        "service.AccountsRes": {
            "type": "object",
            "properties": {
                "accounts": {
                    "description": "Account list",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.Account"
                    }
                },
                "balance": {
                    "description": "The total amount of coins in the chain",
                    "type": "string"
                },
                "total": {
                    "description": "Total number of accounts",
                    "type": "integer"
                }
            }
        },
        "service.Block": {
            "type": "object",
            "properties": {
                "difficulty": {
                    "type": "string"
                },
                "extraData": {
                    "type": "string"
                },
                "gasLimit": {
                    "type": "string"
                },
                "gasUsed": {
                    "type": "string"
                },
                "miner": {
                    "type": "string"
                },
                "mixHash": {
                    "type": "string"
                },
                "number": {
                    "type": "string"
                },
                "parentHash": {
                    "type": "string"
                },
                "receiptsRoot": {
                    "type": "string"
                },
                "sha3Uncles": {
                    "type": "string"
                },
                "size": {
                    "type": "string"
                },
                "stateRoot": {
                    "type": "string"
                },
                "timestamp": {
                    "type": "string"
                },
                "transactionsRoot": {
                    "type": "string"
                },
                "tx_count": {
                    "type": "integer"
                }
            }
        },
        "service.BlocksRes": {
            "type": "object",
            "properties": {
                "blocks": {
                    "description": "block list",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.Block"
                    }
                },
                "total": {
                    "description": "The total number of blocks",
                    "type": "integer"
                }
            }
        },
        "service.CollectionsRes": {
            "type": "object",
            "properties": {
                "collections": {
                    "description": "NFT collection list",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.Collection"
                    }
                },
                "total": {
                    "description": "The total number of NFT collections",
                    "type": "integer"
                }
            }
        },
        "service.EpochsRes": {
            "type": "object",
            "properties": {
                "epochs": {
                    "description": "List of system NFT periods",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.Epoch"
                    }
                },
                "total": {
                    "description": "The total number of NFT periods in the system",
                    "type": "integer"
                }
            }
        },
        "service.ErrRes": {
            "type": "object",
            "properties": {
                "err_str": {
                    "description": "Error message",
                    "type": "string"
                }
            }
        },
        "service.ExchangersRes": {
            "type": "object",
            "properties": {
                "exchangers": {
                    "description": "List of exchanges",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.Exchanger"
                    }
                },
                "last_0_total": {
                    "description": "The number of newly opened exchanges in the latest 0 days (today), calculated in real time",
                    "type": "integer"
                },
                "last_1_total": {
                    "description": "Number of newly opened exchanges in the latest 1 day (yesterday), cached",
                    "type": "integer"
                },
                "last_7_total": {
                    "description": "Number of newly opened exchanges in the last 7 days, cached",
                    "type": "integer"
                },
                "total": {
                    "description": "Total number of exchanges",
                    "type": "integer"
                }
            }
        },
        "service.Log": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "data": {
                    "type": "string"
                },
                "topics": {
                    "type": "string"
                },
                "tx_hash": {
                    "type": "string"
                }
            }
        },
        "service.NFTTxsRes": {
            "type": "object",
            "properties": {
                "nft_txs": {
                    "description": "NFT transaction list",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.NFTTx"
                    }
                },
                "total": {
                    "description": "The total number of NFTs",
                    "type": "integer"
                }
            }
        },
        "service.RewardsRes": {
            "type": "object",
            "properties": {
                "rewards": {
                    "description": "Rewards list",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.Reward"
                    }
                },
                "total": {
                    "description": "The total number of rewards",
                    "type": "integer"
                }
            }
        },
        "service.SNFTGroupsRes": {
            "type": "object",
            "properties": {
                "collections": {
                    "description": "collection information",
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "block_number": {
                                "description": "Create block height, equal to the first NFT in the collection",
                                "type": "integer"
                            },
                            "category": {
                                "description": "category",
                                "type": "string"
                            },
                            "creator": {
                                "description": "Creator",
                                "type": "string"
                            },
                            "desc": {
                                "description": "description",
                                "type": "string"
                            },
                            "exchanger": {
                                "description": "belongs to the exchange",
                                "type": "string"
                            },
                            "fullNFTs": {
                                "description": "16 FullNFT messages",
                                "type": "array",
                                "items": {
                                    "type": "object",
                                    "properties": {
                                        "attributes": {
                                            "description": "Attributes",
                                            "type": "string"
                                        },
                                        "category": {
                                            "description": "category",
                                            "type": "string"
                                        },
                                        "desc": {
                                            "description": "description",
                                            "type": "string"
                                        },
                                        "id": {
                                            "description": "FullNFT ID",
                                            "type": "string"
                                        },
                                        "meta_url": {
                                            "description": "FullNFT meta information URL",
                                            "type": "string"
                                        },
                                        "name": {
                                            "description": "name",
                                            "type": "string"
                                        },
                                        "source_url": {
                                            "description": "Resource links, file links such as pictures or videos",
                                            "type": "string"
                                        },
                                        "total_hold": {
                                            "description": "The number of SNFTs held in a FullNFT",
                                            "type": "integer"
                                        }
                                    }
                                }
                            },
                            "id": {
                                "description": "ID",
                                "type": "string"
                            },
                            "img_url": {
                                "description": "image link",
                                "type": "string"
                            },
                            "meta_url": {
                                "description": "collection meta information URL",
                                "type": "string"
                            },
                            "name": {
                                "description": "name",
                                "type": "string"
                            },
                            "total_hold": {
                                "description": "The number of SNFTs held in a collection",
                                "type": "integer"
                            }
                        }
                    }
                },
                "total": {
                    "description": "The total number of SNFT collections",
                    "type": "integer"
                }
            }
        },
        "service.SNFTsAndMetaRes": {
            "type": "object",
            "properties": {
                "nfts": {
                    "description": "SNFT list",
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "address": {
                                "description": "SNFT address",
                                "type": "string"
                            },
                            "attributes": {
                                "description": "Attributes",
                                "type": "string"
                            },
                            "awardee": {
                                "description": "The address of the miner that was rewarded last, null if it has not been rewarded",
                                "type": "string"
                            },
                            "category": {
                                "description": "category",
                                "type": "string"
                            },
                            "desc": {
                                "description": "description",
                                "type": "string"
                            },
                            "id": {
                                "description": "FullNFT ID",
                                "type": "string"
                            },
                            "last_price": {
                                "description": "The last transaction price, the unit is wei, null if the transaction has not been completed",
                                "type": "string"
                            },
                            "meta_url": {
                                "description": "FullNFT meta information URL",
                                "type": "string"
                            },
                            "name": {
                                "description": "name",
                                "type": "string"
                            },
                            "owner": {
                                "description": "owner, unallocated and reclaimed are null",
                                "type": "string"
                            },
                            "reward_at": {
                                "description": "The timestamp of the last rewarded, null if not rewarded",
                                "type": "integer"
                            },
                            "reward_number": {
                                "description": "The height of the last rewarded block, null if not rewarded",
                                "type": "integer"
                            },
                            "source_url": {
                                "description": "Resource links, file links such as pictures or videos",
                                "type": "string"
                            }
                        }
                    }
                },
                "total": {
                    "description": "The total number of SNFTs",
                    "type": "integer"
                }
            }
        },
        "service.SNFTsRes": {
            "type": "object",
            "properties": {
                "nfts": {
                    "description": "SNFT list",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.SNFT"
                    }
                },
                "total": {
                    "description": "The total number of SNFTs",
                    "type": "integer"
                }
            }
        },
        "service.Transaction": {
            "type": "object",
            "properties": {
                "blockHash": {
                    "type": "string"
                },
                "blockNumber": {
                    "type": "string"
                },
                "from": {
                    "type": "string"
                },
                "gas": {
                    "type": "string"
                },
                "gasPrice": {
                    "type": "string"
                },
                "hash": {
                    "type": "string"
                },
                "input": {
                    "type": "string"
                },
                "internal_calls": {
                    "type": "string"
                },
                "internal_value_transfer": {
                    "type": "string"
                },
                "nonce": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "timestamp": {
                    "type": "string"
                },
                "to": {
                    "type": "string"
                },
                "token_transfer": {
                    "type": "string"
                },
                "transactionIndex": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            }
        },
        "service.TransactionsRes": {
            "type": "object",
            "properties": {
                "total": {
                    "description": "The total number of transactions",
                    "type": "integer"
                },
                "transactions": {
                    "description": "Transaction list",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.Transaction"
                    }
                }
            }
        },
        "service.UserNFTsRes": {
            "type": "object",
            "properties": {
                "nfts": {
                    "description": "NFT list",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.UserNFT"
                    }
                },
                "total": {
                    "description": "The total number of NFTs",
                    "type": "integer"
                }
            }
        }
    }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{
	Version:     "1.0",
	Host:        "",
	BasePath:    "",
	Schemes:     []string{},
	Title:       "block explorer API",
	Description: "Block browser back-end interface, parses data from the blockchain, provides information retrieval services for blocks, transactions, NFT, SNFT, NFT collections, and exchanges",
}

type s struct{}

func (s *s) ReadDoc() string {
	sInfo := SwaggerInfo
	sInfo.Description = strings.Replace(sInfo.Description, "\n", "\\n", -1)

	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface{}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
		"escape": func(v interface{}) string {
			// escape tabs
			str := strings.Replace(v.(string), "\t", "\\t", -1)
			// replace " with \", and if that results in \\", replace that with \\\"
			str = strings.Replace(str, "\"", "\\\"", -1)
			return strings.Replace(str, "\\\\\"", "\\\\\\\"", -1)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, sInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register("swagger", &s{})
}
