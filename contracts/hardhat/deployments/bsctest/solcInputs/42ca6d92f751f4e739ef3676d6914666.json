{
  "language": "Solidity",
  "sources": {
    "contracts/Exchange.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./time.sol\";\r\nimport \"@openzeppelin/contracts/interfaces/IERC20.sol\";\r\n\r\ncontract Exchange is TimetampToHour {\r\n    address public implementation;\r\n    address public _owner;\r\n    address public mwc;\r\n    address public mwf;\r\n    address public mwm;\r\n    address public release;\r\n    address public verify;\r\n    address public black;\r\n    address public nftFarmer;\r\n    address public developer;\r\n\r\n    uint256 public baseFeeRate;\r\n    uint256 public exchangeLimit;\r\n    uint256 public exchangeTotal;\r\n    uint256 public coinExchangeTotal;\r\n\r\n    uint256 startTs;\r\n    bool public switchStatus;\r\n\r\n    mapping(uint256 => uint256) public remainExchangeTotal;\r\n    mapping(uint256 => uint256) public remainCoinExchangeTotal;\r\n\r\n    uint256 public baseRate;\r\n    uint256 public baseRateIncrease;\r\n    uint256 public totalTx;\r\n    uint256[] public txTotalByHour = new uint256[](24);\r\n\r\n    mapping(address => mapping(uint256 => uint256)) public userNonce;\r\n    mapping(uint256 => bool) private _resetExchange;\r\n    mapping(uint256 => bool) private _isReset;\r\n\r\n    event ExchangeCoin(address indexed to, uint256 indexed cate, uint256 amount, uint256 nonce);\r\n    event CoinExchange(address indexed to, uint256 indexed cate, uint256 amount);\r\n\r\n    constructor(){\r\n        _owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function setSwitch(bool _state) external onlyOwner {\r\n        switchStatus = _state;\r\n    }\r\n\r\n    function setOwner(address _addr) external onlyOwner {\r\n        require(_addr != address(0), \"setOwner: address zero not allowed\");\r\n        _owner = _addr;\r\n    }\r\n\r\n    function setVerify(address _addr) external onlyOwner {\r\n        require(_addr != address(0), \"setMwcVerify: address zero not allowed\");\r\n        verify = _addr;\r\n    }\r\n\r\n    function setFeeRate(uint256 _feeRate) external onlyOwner {\r\n        require(_feeRate >= 500 && _feeRate <= 800, \"setFeeRate: address invalid\");\r\n        baseFeeRate = _feeRate;\r\n    }\r\n\r\n    function setBaseRateIncrease(uint256 _feeRateIncrease) external onlyOwner {\r\n        require(_feeRateIncrease <= 100, \"setFeeRate: address invalid\");\r\n        baseRateIncrease = _feeRateIncrease;\r\n    }\r\n\r\n    function setExchangeTotal(uint8 _type, uint256 _amount) external onlyOwner {\r\n        require(_amount > 0 && _type < 3, \"setExchangeTotal: input err\");\r\n        exchangeTotal = _amount;\r\n    }\r\n\r\n    function setCoinExchangeTotal(uint8 _type, uint256 _amount) external onlyOwner {\r\n        require(_amount > 0 && _type < 3, \"setCoinExchangeTotal: input err\");\r\n        coinExchangeTotal = _amount;\r\n    }\r\n\r\n    function _checkBaseRate() private {\r\n        uint256 max;\r\n        for (uint i = 0; i < 24; i++) {\r\n            if (txTotalByHour[i] > max) {\r\n                max = txTotalByHour[i];\r\n            }\r\n            txTotalByHour[i] = 0;\r\n        }\r\n        baseRate = max;\r\n        totalTx = 0;\r\n    }\r\n\r\n    function _refreshExchange() private {\r\n        uint256 thisDayStart = getDayStart();\r\n        if (!_resetExchange[thisDayStart] && block.timestamp >= thisDayStart) {\r\n            remainExchangeTotal[0] = exchangeTotal;\r\n            remainExchangeTotal[1] = exchangeTotal;\r\n            remainExchangeTotal[2] = exchangeTotal;\r\n\r\n            remainCoinExchangeTotal[0] = coinExchangeTotal;\r\n            remainCoinExchangeTotal[1] = coinExchangeTotal;\r\n            remainCoinExchangeTotal[2] = coinExchangeTotal;\r\n\r\n            _resetExchange[thisDayStart] = true;\r\n        }\r\n    }\r\n\r\n    function exchangeCoin(uint256 _amount, uint256 _sigTime, uint256 _type, bytes memory _sig) external {\r\n        require(switchStatus, \"exchangeCoin: Closed\");\r\n        require(block.timestamp - _sigTime < 1800, \"exchangeCoin: Sign timeout\");\r\n        require(_amount > 0 && _type < 3, \"exchangeCoin: Input err\");\r\n        require(remainExchangeTotal[_type] >= _amount, \"exchangeCoin: sellTotal < _amount\");\r\n        uint256 nonce = userNonce[msg.sender][_type];\r\n        address backendVerify = _recoverSigner(\r\n            abi.encodePacked(msg.sender, _amount, _type, nonce, _sigTime),\r\n            _sig\r\n        );\r\n        require(backendVerify == verify, \"exchangeCoin: Signature error\");\r\n        _refreshExchange();\r\n        uint256 hour = timestampToHour(block.timestamp);\r\n        uint256 thisDayStart = getDayStart();\r\n\r\n        if (!_isReset[thisDayStart]) {\r\n            _checkBaseRate();\r\n            _isReset[thisDayStart] = true;\r\n        }\r\n\r\n        uint256 currentFeeRate = getCurrentFeeRate();\r\n        uint256 amount = _amount;\r\n        uint256 fee = amount * currentFeeRate / 10000;\r\n        uint256 perFee = fee / 10;\r\n\r\n        amount -= fee;\r\n        if (_type == 0) {\r\n            IERC20(mwc).transfer(black, perFee * 5);\r\n            IERC20(mwc).transfer(nftFarmer, perFee * 4);\r\n            IERC20(mwc).transfer(developer, perFee);\r\n            IERC20(mwc).transfer(msg.sender, amount);\r\n        } else if (_type == 1) {\r\n            IERC20(mwm).transfer(black, perFee * 5);\r\n            IERC20(mwm).transfer(nftFarmer, perFee * 4);\r\n            IERC20(mwm).transfer(developer, perFee);\r\n            IERC20(mwm).transfer(msg.sender, amount);\r\n        } else if (_type == 2) {\r\n            IERC20(mwf).transfer(black, perFee * 5);\r\n            IERC20(mwf).transfer(nftFarmer, perFee * 4);\r\n            IERC20(mwf).transfer(developer, perFee);\r\n            IERC20(mwf).transfer(msg.sender, amount);\r\n        }\r\n\r\n        userNonce[msg.sender][_type]++;\r\n        remainExchangeTotal[_type] -= _amount;\r\n        txTotalByHour[hour]++;\r\n        totalTx++;\r\n        emit ExchangeCoin(msg.sender, _type, _amount, nonce + 1);\r\n    }\r\n\r\n    function coinExchange(uint256 _amount, uint8 _type) external {\r\n        require(switchStatus, \"coinExchange: Closed\");\r\n        require(_amount > 0 && _type < 3, \"coinExchange: Input err\");\r\n        _refreshExchange();\r\n        require(remainCoinExchangeTotal[_type] >= _amount, \"coinExchange: sellTotal < _amount\");\r\n        if (_type == 0) {\r\n            IERC20(mwc).transferFrom(msg.sender, address(this), _amount);\r\n        } else if (_type == 1) {\r\n            IERC20(mwm).transferFrom(msg.sender, address(this), _amount);\r\n        } else if (_type == 2) {\r\n            IERC20(mwf).transferFrom(msg.sender, address(this), _amount);\r\n        }\r\n\r\n        remainCoinExchangeTotal[_type] -= _amount;\r\n        emit CoinExchange(msg.sender, _type, _amount);\r\n    }\r\n\r\n    function getRemainExchangeCoinTotal(uint256 _type) view public returns (uint256){\r\n        require(_type < 3, \"getRemainExchangeCoinTotal: Input err\");\r\n        uint256 thisDayStart = getDayStart();\r\n        if (!_resetExchange[thisDayStart] && block.timestamp >= thisDayStart) {\r\n            return exchangeTotal;\r\n        } else {\r\n            return remainExchangeTotal[_type];\r\n        }\r\n    }\r\n\r\n    function getRemainCoinExchangeTotal(uint256 _type) view public returns (uint256){\r\n        require(_type < 3, \"getRemainCoinExchangeTotal: Input err\");\r\n        uint256 thisDayStart = block.timestamp - (block.timestamp - startTs) % exchangeLimit;\r\n        if (!_resetExchange[thisDayStart] && block.timestamp >= thisDayStart) {\r\n            return coinExchangeTotal;\r\n        } else {\r\n            return remainCoinExchangeTotal[_type];\r\n        }\r\n    }\r\n\r\n    function getCurrentFeeRate() public view returns (uint256 currentFeeRate){\r\n        if (baseRate == 0) {\r\n            currentFeeRate = baseFeeRate;\r\n        } else {\r\n            uint increase = totalTx * baseRateIncrease / baseRate;\r\n            currentFeeRate = increase >= 300 ? baseFeeRate + 300 : baseFeeRate + increase;\r\n        }\r\n    }\r\n\r\n    function _recoverSigner(bytes memory _data, bytes memory _sig) internal pure returns (address){\r\n        require(_sig.length == 65);\r\n        (uint8 v, bytes32 r, bytes32 s) = (0, 0, 0);\r\n        assembly {\r\n            r := mload(add(_sig, 32))\r\n            s := mload(add(_sig, 64))\r\n            v := byte(0, mload(add(_sig, 96)))\r\n        }\r\n\r\n        return ecrecover(_signHash(_data), v, r, s);\r\n    }\r\n\r\n    function _signHash(bytes memory _data) internal pure returns (bytes32) {\r\n        return\r\n        keccak256(\r\n            abi.encodePacked(\r\n                \"\\x19Ethereum Signed Message:\\n32\",\r\n                keccak256(_data)\r\n            )\r\n        );\r\n    }\r\n\r\n    function getDayStart() private view returns (uint256 ts){\r\n        ts = block.timestamp - (block.timestamp - startTs) % exchangeLimit;\r\n    }\r\n}\r\n"
    },
    "contracts/time.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ncontract DateTimeContract {\r\n    uint256[] flat_year_month_day = [\r\n    0,\r\n    31,\r\n    28,\r\n    31,\r\n    30,\r\n    31,\r\n    30,\r\n    31,\r\n    31,\r\n    30,\r\n    31,\r\n    30,\r\n    31\r\n    ];\r\n    uint256[] leap_year_month_day = [\r\n    0,\r\n    31,\r\n    29,\r\n    31,\r\n    30,\r\n    31,\r\n    30,\r\n    31,\r\n    31,\r\n    30,\r\n    31,\r\n    30,\r\n    31\r\n    ];\r\n\r\n    uint256 constant SECONDS_PER_FOUR_YEAR = 126230400;\r\n    uint256 constant SECONDS_PER_DAY = 24 * 60 * 60;\r\n    uint256 constant SECONDS_PER_HOUR = 60 * 60;\r\n    uint256 constant SECONDS_PER_MINUTE = 60;\r\n    uint256 constant SECONDS_PER_YEAR_FLAT = 31536000;\r\n    uint256 constant SECONDS_PER_YEAR_LEAP = 31622400;\r\n    uint256 constant UNIX_TIME_YEAR = 1970;\r\n    uint256 constant LEAP_YEAR = 0;\r\n    uint256 constant FLAT_YEAR = 1;\r\n    uint256 constant HOUR_OFFSET = 8;\r\n\r\n    function getYear(uint256 timestamp) public view returns (uint256 _year) {\r\n        (_year, , , , ,) = timestampToDate(timestamp);\r\n    }\r\n\r\n    function getMonth(uint256 timestamp) public view returns (uint256 _month) {\r\n        (, _month, , , ,) = timestampToDate(timestamp);\r\n    }\r\n\r\n    function getDay(uint256 timestamp) public view returns (uint256 _day) {\r\n        (, , _day, , ,) = timestampToDate(timestamp);\r\n    }\r\n\r\n    function getHour(uint256 timestamp) public view returns (uint256 _hour) {\r\n        (, , , _hour, ,) = timestampToDate(timestamp);\r\n    }\r\n\r\n    function getMinute(uint256 timestamp) public view returns (uint256 _minute){\r\n        (, , , , _minute,) = timestampToDate(timestamp);\r\n    }\r\n\r\n    function getSecond(uint256 timestamp)public view  returns (uint256 _second){\r\n        (, , , , , _second) = timestampToDate(timestamp);\r\n    }\r\n\r\n    function timestampToDate(uint256 timestamp)public view returns (\r\n        uint256 _year,\r\n        uint256 _month,\r\n        uint256 _days,\r\n        uint256 _hours,\r\n        uint256 _minute,\r\n        uint256 _second\r\n    ){\r\n        _second = timestamp % SECONDS_PER_MINUTE;\r\n        _minute = (timestamp % SECONDS_PER_HOUR) / SECONDS_PER_MINUTE;\r\n        while (timestamp >= SECONDS_PER_FOUR_YEAR) {\r\n            _year++;\r\n            timestamp -= SECONDS_PER_FOUR_YEAR;\r\n        }\r\n        _year = UNIX_TIME_YEAR + (4 * _year);\r\n        if (timestamp >= SECONDS_PER_YEAR_FLAT) {\r\n            _year++;\r\n            timestamp -= SECONDS_PER_YEAR_FLAT;\r\n            if (timestamp >= SECONDS_PER_YEAR_FLAT) {\r\n                _year++;\r\n                timestamp -= SECONDS_PER_YEAR_FLAT;\r\n                if (timestamp >= SECONDS_PER_YEAR_LEAP) {\r\n                    _year++;\r\n                    timestamp -= SECONDS_PER_YEAR_LEAP;\r\n                    if (timestamp >= SECONDS_PER_YEAR_FLAT) {\r\n                        _year++;\r\n                        timestamp -= SECONDS_PER_YEAR_FLAT;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        uint256 isLeapOrFlatYear;\r\n        if (((_year % 4 == 0) && (_year % 100 != 0)) || (_year % 400 == 0)) {\r\n            isLeapOrFlatYear = LEAP_YEAR;\r\n        } else {\r\n            isLeapOrFlatYear = FLAT_YEAR;\r\n        }\r\n\r\n        _days = timestamp / SECONDS_PER_DAY;\r\n\r\n        _hours =\r\n        (timestamp - _days * SECONDS_PER_DAY) /\r\n        SECONDS_PER_HOUR +\r\n        HOUR_OFFSET;\r\n        _hours=_hours%24;\r\n        _month = 1;\r\n\r\n        for (uint256 i = 0; i < 12; i++) {\r\n            if (isLeapOrFlatYear == FLAT_YEAR) {\r\n                if (_days >= flat_year_month_day[i + 1]) {\r\n                    _month++;\r\n                    _days -= flat_year_month_day[i + 1];\r\n                }\r\n            } else if (isLeapOrFlatYear == LEAP_YEAR) {\r\n                if (_days >= leap_year_month_day[i + 1]) {\r\n                    _month++;\r\n                    _days -= leap_year_month_day[i + 1];\r\n                }\r\n            }\r\n        }\r\n        _days += 1;\r\n    }\r\n}\r\n\r\ncontract TimetampToHour {\r\n    uint256 constant SECONDS_PER_DAY = 24 * 60 * 60;\r\n    uint256 constant SECONDS_PER_HOUR = 60 * 60;\r\n    uint256 constant HOUR_OFFSET = 8;\r\n    function timestampToHour(uint256 timestamp)public pure returns (\r\n        uint256 _hours\r\n    ){\r\n       uint256 day = timestamp / SECONDS_PER_DAY;\r\n        _hours =\r\n        (timestamp - day * SECONDS_PER_DAY) /\r\n        SECONDS_PER_HOUR +\r\n        HOUR_OFFSET;\r\n        _hours=_hours%24;\r\n    }\r\n}\r\n\r\n"
    },
    "@openzeppelin/contracts/interfaces/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../token/ERC20/IERC20.sol\";\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "contracts/ExchangeProxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/proxy/Proxy.sol\";\r\nimport \"./MWC.sol\";\r\nimport \"./MWM.sol\";\r\nimport \"./MWF.sol\";\r\nimport \"./Exchange.sol\";\r\nimport \"./Release.sol\";\r\n\r\ncontract ExchangeProxy is Proxy {\r\n    address public implementation;\r\n    address public _owner;\r\n    MWC public mwc;\r\n    MWF public mwf;\r\n    MWM public mwm;\r\n    Release public release;\r\n    address public verify;\r\n    address public black;\r\n    address public nftFarmer;\r\n    address public developer;\r\n\r\n    uint256 public baseFeeRate;\r\n    uint256 public exchangeLimit;\r\n    uint256 public exchangeTotal;\r\n    uint256 public coinExchangeTotal;\r\n\r\n    uint256 startTs;\r\n    bool public switchStatus;\r\n\r\n    mapping(uint256 => uint256) public remainExchangeTotal;\r\n    mapping(uint256 => uint256) public remainCoinExchangeTotal;\r\n\r\n    uint256 public baseRate;\r\n    uint256 public baseRateIncrease;\r\n    uint256 public totalTx;\r\n    uint256[] public txTotalByHour = new uint256[](24);\r\n\r\n    constructor(address _fund, address _team, address _firstRelease, address _nft, address _market, address _nature, address _black, address _nftFarmer, address _developer, address _verify){\r\n        _owner = msg.sender;\r\n        Exchange exchange = new Exchange();\r\n        implementation = address(exchange);\r\n        release = new Release(address(this), msg.sender, _fund, _team, _nature, _market);\r\n        mwc = new MWC(address(this), address(release), _firstRelease, _nft);\r\n        mwf = new MWF(address(this), address(release), _firstRelease, _nft);\r\n        mwm = new MWM(address(this), address(release), _firstRelease, _nft);\r\n        release.init(address(mwc), address(mwf), address(mwm));\r\n\r\n        black = _black;\r\n        nftFarmer = _nftFarmer;\r\n        developer = _developer;\r\n        verify = _verify;\r\n\r\n        exchangeTotal = 1000000 * 1e18;\r\n        coinExchangeTotal = 1000000 * 1e18;\r\n\r\n        remainCoinExchangeTotal[0] = 1000000 * 1e18;\r\n        remainExchangeTotal[0] = 1000000 * 1e18;\r\n        remainCoinExchangeTotal[1] = 1000000 * 1e18;\r\n        remainExchangeTotal[1] = 1000000 * 1e18;\r\n        remainCoinExchangeTotal[2] = 1000000 * 1e18;\r\n        remainExchangeTotal[2] = 1000000 * 1e18;\r\n\r\n        startTs = 1637078400;\r\n        exchangeLimit = 86400;\r\n        baseRate = 100;\r\n        baseRateIncrease = 100;\r\n        baseFeeRate = 500;\r\n        switchStatus = true;\r\n    }\r\n\r\n    fallback() override payable external {\r\n       _fallback();\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function setOwner(address _addr) external onlyOwner {\r\n        require(_addr != address(0), \"setOwner: address zero not allowed\");\r\n        _owner = _addr;\r\n    }\r\n\r\n    function _implementation() internal view override returns (address){\r\n        return implementation;\r\n    }\r\n\r\n    function setImplementation(address _addr) external onlyOwner {\r\n        require(_addr != address(0), \"setImplementation: address zero not allowed\");\r\n        implementation = _addr;\r\n    }\r\n}\r\n"
    },
    "@openzeppelin/contracts/proxy/Proxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/Proxy.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\n * be specified by overriding the virtual {_implementation} function.\n *\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\n * different contract through the {_delegate} function.\n *\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\n */\nabstract contract Proxy {\n    /**\n     * @dev Delegates the current call to `implementation`.\n     *\n     * This function does not return to its internall call site, it will return directly to the external caller.\n     */\n    function _delegate(address implementation) internal virtual {\n        assembly {\n            // Copy msg.data. We take full control of memory in this inline assembly\n            // block because it will not return to Solidity code. We overwrite the\n            // Solidity scratch pad at memory position 0.\n            calldatacopy(0, 0, calldatasize())\n\n            // Call the implementation.\n            // out and outsize are 0 because we don't know the size yet.\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\n\n            // Copy the returned data.\n            returndatacopy(0, 0, returndatasize())\n\n            switch result\n            // delegatecall returns 0 on error.\n            case 0 {\n                revert(0, returndatasize())\n            }\n            default {\n                return(0, returndatasize())\n            }\n        }\n    }\n\n    /**\n     * @dev This is a virtual function that should be overriden so it returns the address to which the fallback function\n     * and {_fallback} should delegate.\n     */\n    function _implementation() internal view virtual returns (address);\n\n    /**\n     * @dev Delegates the current call to the address returned by `_implementation()`.\n     *\n     * This function does not return to its internall call site, it will return directly to the external caller.\n     */\n    function _fallback() internal virtual {\n        _beforeFallback();\n        _delegate(_implementation());\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\n     * function in the contract matches the call data.\n     */\n    fallback() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\n     * is empty.\n     */\n    receive() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\n     * call, or as part of the Solidity `fallback` or `receive` functions.\n     *\n     * If overriden should call `super._beforeFallback()`.\n     */\n    function _beforeFallback() internal virtual {}\n}\n"
    },
    "contracts/MWC.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\n\r\ncontract MWC is ERC20 {\r\n    constructor(address _exchange, address _release, address _firstRelease, address _nft) ERC20(\"MWC\", \"mwc\"){\r\n        _mint(_exchange, 40 * 1e26);\r\n        _mint(_release, 37 * 1e26);\r\n        _mint(_firstRelease, 18 * 1e26);\r\n        _mint(_nft, 5 * 1e26);\r\n    }\r\n}\r\n"
    },
    "contracts/MWM.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\n\r\ncontract MWM is ERC20 {\r\n    constructor(address _exchange, address _release, address _firstRelease, address _nft) ERC20(\"MWM\", \"mwm\"){\r\n        _mint(_exchange, 40 * 1e26);\r\n        _mint(_release, 37 * 1e26);\r\n        _mint(_firstRelease, 18 * 1e26);\r\n        _mint(_nft, 5 * 1e26);\r\n    }\r\n}\r\n"
    },
    "contracts/MWF.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\n\r\ncontract MWF is ERC20 {\r\n    constructor(address _exchange, address _release, address _firstRelease, address _nft) ERC20(\"MWF\", \"mwf\"){\r\n        _mint(_exchange, 40 * 1e26);\r\n        _mint(_release, 37 * 1e26);\r\n        _mint(_firstRelease, 18 * 1e26);\r\n        _mint(_nft, 5 * 1e26);\r\n    }\r\n}\r\n"
    },
    "contracts/Release.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./time.sol\";\r\nimport \"@openzeppelin/contracts/interfaces/IERC20.sol\";\r\n\r\ncontract Release is DateTimeContract {\r\n    address public mwc;\r\n    address public mwf;\r\n    address public mwm;\r\n    address private owner;\r\n    address public exchange;\r\n    address public fund;\r\n    address public team;\r\n    address public nature;\r\n    address public market;\r\n    bool public _isInit;\r\n    uint256 public totalRelease;\r\n\r\n    uint256  constant public teamReleaseMonth = 12 * 1e26 / uint256(24);\r\n    uint256  constant public natureReleaseMonth = 12 * 1e26 / uint256(24);\r\n    uint256  constant public  marketReleaseMonth = 5 * 1e26 / uint256(24);\r\n    uint256  constant public fundReleaseMonth = 8 * 1e26 / uint256(24);\r\n    mapping(uint256 => bool) isRelease;\r\n\r\n    event RELEASE(address operator, uint256 month,uint256 totalRelease);\r\n    constructor(address _exchange, address _owner, address _fund, address _team, address _nature, address _market){\r\n        exchange = _exchange;\r\n        owner = _owner;\r\n        fund = _fund;\r\n        team = _team;\r\n        nature = _nature;\r\n        market = _market;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(owner == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function init(address _mwc, address _mwf, address _mwm) external {\r\n        require(!_isInit && exchange == msg.sender, \"init: init failed\");\r\n        mwc = _mwc;\r\n        mwf = _mwf;\r\n        mwm = _mwm;\r\n    }\r\n\r\n    function setOwner(address _addr) external onlyOwner {\r\n        require(_addr != address(0), \"setOwner: address zero not allowed\");\r\n        owner = _addr;\r\n    }\r\n\r\n    function setFund(address _addr) external onlyOwner {\r\n        require(_addr != address(0), \"address zero not allowed\");\r\n        fund = _addr;\r\n    }\r\n\r\n    function setTeam(address _addr) external onlyOwner {\r\n        require(_addr != address(0), \"address zero not allowed\");\r\n        team = _addr;\r\n    }\r\n\r\n    function setNature(address _addr) external onlyOwner {\r\n        require(_addr != address(0), \"address zero not allowed\");\r\n        nature = _addr;\r\n    }\r\n\r\n    function setMarket(address _addr) external onlyOwner {\r\n        require(_addr != address(0), \"address zero not allowed\");\r\n        market = _addr;\r\n    }\r\n    \r\n    function release(uint256 ts) external onlyOwner {\r\n        uint256 mon = getMonth(ts);\r\n        require(!isRelease[mon], \"release: Already release at this month \");\r\n        require(totalRelease < 24, \"release: It out of release\");\r\n        if(mon==12){\r\n            for(uint i=1;i<12;i++){\r\n                delete isRelease[i];\r\n            }\r\n        }else if(mon==1){\r\n             delete isRelease[12];\r\n        }\r\n        IERC20(mwc).transfer(fund, fundReleaseMonth);\r\n        IERC20(mwf).transfer(fund, fundReleaseMonth);\r\n        IERC20(mwm).transfer(fund, fundReleaseMonth);\r\n\r\n        IERC20(mwc).transfer(team, teamReleaseMonth);\r\n        IERC20(mwf).transfer(team, teamReleaseMonth);\r\n        IERC20(mwm).transfer(team, teamReleaseMonth);\r\n\r\n        IERC20(mwc).transfer(nature, natureReleaseMonth);\r\n        IERC20(mwf).transfer(nature, natureReleaseMonth);\r\n        IERC20(mwm).transfer(nature, natureReleaseMonth);\r\n\r\n        IERC20(mwc).transfer(market, marketReleaseMonth);\r\n        IERC20(mwf).transfer(market, marketReleaseMonth);\r\n        IERC20(mwm).transfer(market, marketReleaseMonth);\r\n        isRelease[mon] = true;\r\n        totalRelease++;\r\n        emit RELEASE(msg.sender,mon,totalRelease);\r\n    }\r\n}\r\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n        unchecked {\n            _approve(sender, _msgSender(), currentAllowance - amount);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        uint256 senderBalance = _balances[sender];\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[sender] = senderBalance - amount;\n        }\n        _balances[recipient] += amount;\n\n        emit Transfer(sender, recipient, amount);\n\n        _afterTokenTransfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}